<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-05T09:51:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HOME</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">CGI,WSGI,uwsgi,uWSGI</title><link href="http://localhost:4000/2019-06-29/CGI,WSGI,uwsgi,uWSGI" rel="alternate" type="text/html" title="CGI,WSGI,uwsgi,uWSGI" /><published>2019-06-29T00:00:00+09:00</published><updated>2019-06-29T00:00:00+09:00</updated><id>http://localhost:4000/2019-06-29/CGI,WSGI,uwsgi,uWSGI</id><content type="html" xml:base="http://localhost:4000/2019-06-29/CGI,WSGI,uwsgi,uWSGI">&lt;p&gt;flask나 django로 웹 애플리케이션을 배포하다 보면 uWSGI, WSGI 등의 용어를 찾아볼 수 있다. 용어가 비슷비슷해 헷갈리는 경우가 많아 용어 정리 및 동작 방식에 대해 정리해 보았다.&lt;/p&gt;

&lt;h2 id=&quot;cgi&quot;&gt;CGI&lt;/h2&gt;

&lt;p&gt;유저가 웹사이트를 들어올 때 브라우저는 해당 사이트를 제공하는 웹서버와 연결된다. 서버는 요청된 파일을 파일 시스템 안에서 찾고 찾은 내용을 유저에게 보내준다. 이러한 방식은 HTTP protocol의 대략적인 모습이다. 하지만 동적인 웹사이트들은 파일시스템 안의 파일을 기봔으로 만들어져 있기 보다는, 요청이 들어왔을 때 웹서버에 의해서 가동되어 유저에게 제공될 콘텐츠를 만들어 내는 프로그램에 기반한다. 이러한 프로그램은 웹서버가 지원 할 수 있는 어떠한 프로그래밍 언어로든지 만들어 질 수 있다. 대부분의 HTTP서버는 C 혹은 C++로 만들어져 있기 때문에 바로 파이썬 코드를 호출 할 수 없었고 그 사이에는 파이썬과 웹서버를 연결해줄 인터페이스가 필요했다. 이러한 인터페이스는 파이썬과 같은 언어로 만들어진 프로그램이 어떻게 server와 상호작용 해야 할 지를 결정했다. 일반적으로 CGI라고 하는 이 인터페이스는 가장 오래된 것으로 거의 모든 웹 서버에서 지원된다. 웹서버와 상호작용 하기 위해 CGI를 사용하는 프로그램은 모든 요청마다 서버에 의해 새롭게 가동 될 필요가 있다. 즉, 모든 request는 새로운 python interpreter를 가동시키기 때문에 많은 부하를 받아내는데에는 한계가 있다.&lt;/p&gt;

&lt;h2 id=&quot;mod_python&quot;&gt;mod_python&lt;/h2&gt;

&lt;p&gt;mod_python은 Apache process에 인터프리터를 내장시키는 방식으로서, 주로 php에서 넘어온 개발자들이 python을 웹에서 사용하기 위해 만들게 되었다(mod_php). 기존의 CGI가 각각의 request마다 process를 만들고 process가 생길 때 마다 interpreter를 가동시키는 방법이라면, mod_python은 python interpreter를 아파치 서버의 process에 내장 함으로써 각각의 request별로 python interpreter를 가동시키지 않아도 되게끔 만들어 성능 향상을 이뤄냈다. 하지만 문제점도 있는데 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* PHP interpreter와는 다르게 python interpreter는 캐시를 사용하는데 파일이 변경 될 경우 웹서버가 재가동 되어야만 변경사항이 적용된다.
* 아파치 서버는 request를 처리하기 위해 자식 프로세스를 사용하는데 모든 자식 프로세스들은 python interpreter를 사용하지 않더라도 python interpreter가 가동된 상태에서 동작해야만 했다.
* 특정 버전의 libpython 의존성이 있다.
* 아파치 웹서버와 엮여 있었기 때문에 다른 웹 서버와 쉽사리 연결되지 않았다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 문제들 때문에 새로운 프로그램을 만 들 때 mod_python을 사용하는데에 어려움이 있지만, 특정 상황에서는 아직도 mod_python을 사용하는 것이 좋을 수 있다. 하지만 WSGI가 생겨남으로써 WSGI를 통해 mod_python 환경에서 python application을 구동 할 수도 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;fastcgi&quot;&gt;FastCGI&lt;/h2&gt;

&lt;p&gt;FastCGI와 SCGI는 mod_python과는 방식으로 CGI의 성능 문제를 해결하려고 시도했다. mod_python과 같이 인터프리터를 웹서버에 내장하는 방식 대신에 오랬동안 동작하는 백그라운드 프로세스를 만들어서 사용하는 방식으로 성능 향상을 이뤄냈다. 웹서버에서 백그라운드 프로세스로 내용전달을 가능하게끔 하는 모듈은 여전히 웹서버 안에 있다. 백그라운드 프로세스는 서버와는 독립적으로 동작했기 때문에 파이썬을 포함해 어떤 언어로든지 만들어 질 수 있었다. 다만 사용 되는 언어에서 웹서버와 커뮤니케이션을 조작하기 위한 라이브러리를 가지고 있어야 한다. SCGI는 단지 “simpler FastCGI” 이기 때문에 FastCGI와 SCGI의 차이점은 거의 없다. 다만 웹서버가 SCGI를 지원하는 것에는 제한이 있기 때문에 대부분의 사람들은 똑같은 방식으로 동작하는 FastCGI를 사용한다.
오늘 날에는 FastCGI를 직접적으로 사용하는 일은 없다. mod_python처럼 단지 WSGI application을 배포하는 용도로 사용된다.&lt;/p&gt;

&lt;h2 id=&quot;wsgi&quot;&gt;WSGI&lt;/h2&gt;

&lt;p&gt;웹서버와 python appication 간의 인터페이스 규격이다. 이전에는 파이썬으로 웹애플리케이션을 만들기 위해서는 웹서버와 웹서버와 동적 프로그래밍간의 인터페이스에 따라서 각각 다르게 개발해야만 했기 때문에 서버 선택이나 프로토콜 선택에 제약이 있었다. WSGI는 웹서버와 애플리케이션 간에 요청을 주고받는 방식을 통일함으로써 이러한 제약사항을 없애주었다. 
참고로 WSGI는 CGI 디자인 패턴을 기반으로 하였으나 파이썬 인터프리터를 어떤 방식으로 동작시켜야 하는지 명시하지 않았고, 앱 객체가 로드되거나 구성되는 방식 또한 마찬가지로 따로 명시하지 않았다. 그렇기 때문에 WSGI를 지원하는 framework 이나 webserver들은 각각 다른 방식으로(CGI/FastCGI/mod_python) webserver와 통신한다. 따라서 WSGI는 CGI/FastCGI/mod_python 과 비교 할 수 있는 개념이 아니다. 이러한 것들은 모두 protocol의 개념이며, WSGI는 이러한 프로토콜 보다 더 상위레벨(high level)의 개념으로 CGI든 FastCGI방식이든 WSGI규격을 준수해 만들어 졌다면 application 단에서는 어떤 웹서버, 어떤 프로토콜을 사용하는지 신경쓰지 않고 WSGI규격에만 맞춰서 웹 애플리케이션이나 프래임웍을 만들면 된다.&lt;/p&gt;

&lt;h2 id=&quot;uwsgi&quot;&gt;uWSGI&lt;/h2&gt;

&lt;p&gt;WSGI표준으로 만들어진 웹서버. mod_wsgi, gunicorn, twisted.web, tornado 등이 있다. 다시 말하면 WSGI는 일종의 규격이고 그 규적을 충족시키며 만든 웹서버들이 위와 같은 것들이다.&lt;/p&gt;

&lt;h2 id=&quot;uwsgi-1&quot;&gt;uwsgi&lt;/h2&gt;

&lt;p&gt;웹서버와 WSGI middleware 간에 통신하는 protocol(규격) 
예를 들면 nginx &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; uWSGI(python application이 여기서 동작) 이런식의 관계&lt;/p&gt;

&lt;p&gt;————–참고————–&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/&quot;&gt;Python documentation - PEP3333 python web server gateway interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/howto/webservers.html#&quot;&gt;python web service에 대한 전반적인 내용이 담겨있다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/8691337/8319977&quot;&gt;wsgi, uwsgi uWSGI에 대한 용어 구분 stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3937224/differences-and-uses-between-wsgi-cgi-fastcgi-and-mod-python-in-regards-to-py&quot;&gt;“Differences and uses between WSGI, CGI, FastCGI, and mod_python in regards to Python?” 질문에 대한stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/49009791/8319977&quot;&gt;uWSGI에 대한 stackoverflow의 답변&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface&quot;&gt;WSGI does not specify how the Python interpreter should be started, nor how the application object should be loaded or configured, and different frameworks and webservers achieve this in different ways.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rufuspollock.com/2006/09/28/wsgi-middleware/&quot;&gt;WSIG middleware에 대한 간단한 설명과 예시&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackpython.com/wsgi-servers.html&quot;&gt;WSGI가 생겨난 배경에 대해서 알 수 있음&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://be.groovie.org/2005/10/07/wsgi_and_wsgi_middleware_is_easy.html&quot;&gt;WSGI와 WSGI middleware에 대한 간단하지만 정확하고 쉬운 설명&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://khanrc.tistory.com/entry/WSGI%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EB%85%90&quot;&gt;Middleware에 대해서 잘 설명해 놓음. WSGI로 만들어진 미들웨어가 mod_wsgi, uWSGI, gunicorn, twisted.web, tornado&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI를 지원하는 프레임웍, 서버, 어플리케이션, WSGI middleware와 라이브러리를 나열해 놓음&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B3%B5%EC%9A%A9_%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;wiki에서 cgi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brownbears.tistory.com/350&quot;&gt;cgi와 wsgi의 차이에 대해서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://show-me-the-money.tistory.com/50&quot;&gt;cgi가 무엇인지에 대한 포스팅&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://snuet.com/CML/C05/C05.html&quot;&gt;CGI에 대한 상세한 설명&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/howto/webservers.html#common-gateway-interface&quot;&gt;cgi 동작에 관한 설명&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/howto/webservers.html#common-problems-with-cgi-scripts&quot;&gt;Common problems with CGI scripts&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="post" /><category term="python" /><category term="webserver" /><category term="CGI" /><category term="WSGI" /><summary type="html">flask나 django로 웹 애플리케이션을 배포하다 보면 uWSGI, WSGI 등의 용어를 찾아볼 수 있다. 용어가 비슷비슷해 헷갈리는 경우가 많아 용어 정리 및 동작 방식에 대해 정리해 보았다.</summary></entry><entry><title type="html">RUN, CMD, ENTRYPOINT 의 차이점에 대해서 알아보자.</title><link href="http://localhost:4000/2018-10-06/Docker-RUN,-CMD-ENTRYPOINT" rel="alternate" type="text/html" title="RUN, CMD, ENTRYPOINT 의 차이점에 대해서 알아보자." /><published>2018-10-06T00:00:00+09:00</published><updated>2018-10-06T00:00:00+09:00</updated><id>http://localhost:4000/2018-10-06/Docker%20RUN,%20CMD%20ENTRYPOINT</id><content type="html" xml:base="http://localhost:4000/2018-10-06/Docker-RUN,-CMD-ENTRYPOINT">&lt;p&gt;RUN, CMD, ENTRYPOINT 의 차이점에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;검색을 하면 한글로도 너무나 잘 설명을 해 놓은 곳이 많기에 관련 링크를 남기고 여기서는 간단한 차이점만 알아보자&lt;/p&gt;

&lt;p&gt;(물론 더 자세하게 개념을 이해하기 위해서는 Docker의 cache와 layer의 개념을 알아야 하지만 몰라도 어느정도는 이해하고 활용할 수 있다.)&lt;/p&gt;

&lt;h3 id=&quot;run&quot;&gt;RUN&lt;/h3&gt;

&lt;p&gt;이미지를 빌드 할 때 원하는 명령어를 실행 할 수 있고, 실행한 명령은 새로운 레이어를 형성한다.&lt;/p&gt;

&lt;h3 id=&quot;cmd&quot;&gt;CMD&lt;/h3&gt;

&lt;p&gt;만들어진 이미지를 실행 시킬 때(docker run  할 때) default로 실행되는 명령어다. 이미지를 작동시켰을 때 default로 실행되는 명령어를 지정할 때 사용된다.&lt;/p&gt;

&lt;h3 id=&quot;entrypoint&quot;&gt;ENTRYPOINT&lt;/h3&gt;

&lt;p&gt;ENTRYPOINT는 CMD와 같이 만들어진 이미지를 실행 시킬 때 default로 실행되는 명령어다. CMD와 ENTRYPOINT를 함께 작성 할 경우 CMD 명령은 무시되고 CMD에 해당되는 항목은 ENTRYPOINT 명령의 매개변수로 전달된다.&lt;/p&gt;

&lt;p&gt;예를 들어 dockerfile에 아래와 같이 작성하면&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;echo&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;hello&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌드한 이미지를 실행할 경우 컨테테이너 안에서 아래와 같이 실행 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; example &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run example
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또 한가지 CMD와의 차이점은 CMD의 경우 docker run 을 실행할 때 커맨드라인에서 전달 된 인자를 실행 시킬 수 있는데 ENTRYPOINT의 경우 Dockerfile에 작성한 ENTRYPOINT의 내용이 반드시 실행되고 docker run 을 실행할 때 커맨드라인에 전달된 인자는 파라미터값으로만 전달된다는 점이다.&lt;/p&gt;

&lt;p&gt;참고 (여기에 관련 내용이 자세히 설명되어 있다)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://aboullaite.me/dockerfile-run-vs-cmd-vs-entrypoint/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="post" /><category term="Doker" /><summary type="html">Dockerfile 작성시 RUN, CMD, ENTRYPOINT를 잘 몰라 헤맸던 기억이 있어 관련 내용을 간단하게 정리해 보고자 한다.</summary></entry><entry><title type="html">파이썬에서 파일 다루기</title><link href="http://localhost:4000/2018-09-01/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0" rel="alternate" type="text/html" title="파이썬에서 파일 다루기" /><published>2018-09-01T00:00:00+09:00</published><updated>2018-09-01T00:00:00+09:00</updated><id>http://localhost:4000/2018-09-01/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C%20%ED%8C%8C%EC%9D%BC%20%EB%8B%A4%EB%A3%A8%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2018-09-01/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0">&lt;p&gt;주로 장고로 웹서버만 만드는 것만 하다보니 파일을 읽고 쓰는 python기능을 자주 쓸 일이 없었다. 그런데 실제로 일을 시작하니 간혹 사용 할 일이 있더라….&lt;/p&gt;

&lt;p&gt;읽고 쓰는건 간단한 일인데 모드가 자꾸 기억나지 않아서 쓸 때마다 구글을 검색해야 하는 번잡함을 피하고자 블로그에 기록해놓으려고 한다.&lt;/p&gt;

&lt;p&gt;일단 이와 관련해서 한글로 너무나 잘 정리 된 글이 있어서 소개한다. - &lt;a href=&quot;http://thrillfighter.tistory.com/310&quot;&gt;http://thrillfighter.tistory.com/310&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그리고 파이썬 공식문서의 open 메소드 설명 - &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt;https://docs.python.org/3/library/functions.html#open&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파일을 여는데에는 여러가지 모드와 옵션이 존재한다. 여기서는 여러가지 &lt;code class=&quot;highlighter-rouge&quot;&gt;모드&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;옵션&lt;/code&gt;을 정리한다. (왜냐면 내가 필요하니까)&lt;/p&gt;

&lt;p&gt;open 메소드는 아래와 같이 사용된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;file_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(출처 &lt;a href=&quot;https://www.tutorialspoint.com/python/python_files_io.htm&quot;&gt;tutorialpoint&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;아래는 사용할 수 있는 모드의 종류다.&lt;/p&gt;

&lt;p&gt;파이썬의 모드는 C언어의 standard library function인 &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen()&lt;/code&gt;과 같다. 따라서 해당 내용을 참고한다면 좀더 풍부하게 python의 &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt;을 사용할 수 있을 것 같다. 예를 들어 파이썬 공식 문서에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;r+&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;w+&lt;/code&gt;와 같이 ‘+’를 사용하는 것을 상세하게 소개하진 않는다.(내가 그렇게 느낀다… 물론 내가 영어를 잘 못알아 먹은 경우의 수도 있다.)&lt;/p&gt;

&lt;h3 id=&quot;모드&quot;&gt;모드&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Character&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'r'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;open for reading (default) / 파일이 없을 경우 에러&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'w'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;open for writing, truncating the file first / 파일이 없으면 새로 만든다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'x'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;open for exclusive creation, failing if the file already exists&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'a'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;open for writing, appending to the end of the file if it exists&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'U'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt; mode (deprecated)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;옵션&quot;&gt;옵션&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Character&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'b'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;binary mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'t'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;text mode (default)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'+'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;open a disk file for updating (reading and writing)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;예시&quot;&gt;예시&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 쓰기모드 + 텍스트옵션&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 읽기모드 + 바이너리옵션&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read_binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;w-r-a의-차이점&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;a+&lt;/code&gt;의 차이점&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;모드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;w+&lt;/td&gt;
      &lt;td&gt;기존 파일에 있던 데이터를 완전히 지우고 새로 작성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r+&lt;/td&gt;
      &lt;td&gt;기존 파일에 있던 데이터 위에 덮어씌움 (파일이 없으면 에러를 뿜는다)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a+&lt;/td&gt;
      &lt;td&gt;기존 파일 가장 뒷자리부터 작성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ex) 기존 파일에 “hello world”라는 내용이 있고 “aa”를 입력하는 경우 각 모드별 차이&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;모드&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;w+&lt;/td&gt;
      &lt;td&gt;“aa”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r+&lt;/td&gt;
      &lt;td&gt;“aallo world”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a+&lt;/td&gt;
      &lt;td&gt;“hello world”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;마지막으로-open-메서드에-나오는-buffering에-대하여&quot;&gt;마지막으로 open 메서드에 나오는 buffering에 대하여&lt;/h3&gt;

&lt;p&gt;버퍼는 메모리라고 생각하면 되는데, 간단히 말해 os가 제공해 주는 인터페이스를 통해 파일을 읽어오는게 아니라 메모리에 올려서 읽어오는 것을 말한다. open메서드에서 buffering을 설정 하는 것은 메모리에 얼마만큼의 단위로 올려서 가져올지 정하는 것 이다. (사실 나도 개념적으로만 이해하고 있지 실제로 잘 사용해보지는 않았다.)&lt;/p&gt;

&lt;p&gt;스택오버플로우의 답변에 의하면 os시스템을 통해서 raw stream으로 가져오는 것 보다 메모리에 올려 파일을 읽어오는 것이 더 빠르다고 한다.. (os 시스템에서 raw stream으로 가져오는 것은 대기 시간이 길다고 함) 아마 설정한 buffer chunk 단위로 메모리에 미리 올려 놓기 때문에 더 빠른 것 같다.&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt;파이썬 공식문서&lt;/a&gt;, &lt;a href=&quot;http://thrillfighter.tistory.com/310&quot;&gt;블로그&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/29712445/what-is-the-use-of-buffering-in-pythons-built-in-open-function&quot;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="post" /><category term="python" /><summary type="html">파이썬에서 파일을 읽고 쓰는건 간단한 일인데 어떤 모드를 사용할지 자꾸 헷갈리기도 하고 잘 정리한 블로그가 있어 소개하려고 한다.</summary></entry><entry><title type="html">생활코딩web2 javascript</title><link href="http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web2-javascript" rel="alternate" type="text/html" title="생활코딩web2 javascript" /><published>2018-03-24T00:00:00+09:00</published><updated>2018-03-24T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web2%20javascript</id><content type="html" xml:base="http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web2-javascript">&lt;h1 id=&quot;수업을-시작하며&quot;&gt;수업을 시작하며&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;w3s의 자바스크립트를 한번 훑어 본 후 1.5배속으로 강의를 빠르게 들었다.&lt;/li&gt;
  &lt;li&gt;이미 조금씩 맛을 본 상황이어서 빠르게 볼 수 있었던 것 같다.&lt;/li&gt;
  &lt;li&gt;수업 중 기억하고 싶은 것들을 적어 놓았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-수업의-목적&quot;&gt;2. 수업의 목적&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;실습을 통해 문법을 익혀간다.&lt;/li&gt;
  &lt;li&gt;자바스크립트는 사용자와 상호작용하기 위한 언어&lt;/li&gt;
  &lt;li&gt;자바스크립트는 html을 제어하는 언어&lt;/li&gt;
  &lt;li&gt;웹페이지를 동적으로 만들어줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-html과-js의-만남-script-태그&quot;&gt;3. html과 js의 만남: script 태그&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; ,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;태그를 통해 javascript 를 추가할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-html과-js의-만남-이벤트&quot;&gt;4. html과 js의 만남: 이벤트&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;onclick
    &lt;ul&gt;
      &lt;li&gt;속성값으로 반드시 자바스크립트가 와야한다&lt;/li&gt;
      &lt;li&gt;속성값은 웹브라우저가 기억하고 있다가, 속성이 위치하고 있는 태그에 해당 이벤트가 일어나면 자바스크립트 코드가 실행된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹브라우저에서 일어날 수 있는 주요 이벤트
    &lt;ul&gt;
      &lt;li&gt;10개에서 20개 정도되는 이벤트를 미리 정의해 놓고 있다.&lt;/li&gt;
      &lt;li&gt;이런 이벤트를 통해서 사용자와 상호작용 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;어떤 이벤트와 속성이 있는지는 검색하면 다 나온다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-html과-js의-만남-콘솔&quot;&gt;5. html과 js의 만남: 콘솔&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;웹브라우저의 콘솔을 통해 자바스크립트를 작동시켜볼 수 있다.&lt;/li&gt;
  &lt;li&gt;콘솔에서 실행시킨 자바스크립트는 해당 웹페이지 안에서 작동하는 자바스크립트처럼 작동합니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;6-데이터타입---문자열과-숫자&quot;&gt;6. 데이터타입 - 문자열과 숫자&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;자바스크립트에서의 데이터형태에 대해서 알아봅니다.&lt;/li&gt;
  &lt;li&gt;데이터타입 = 자료형&lt;/li&gt;
  &lt;li&gt;자바스크립트 데이터타입 종류
    &lt;ul&gt;
      &lt;li&gt;기본 자료형인 여섯가지 데이터 타입
        &lt;ul&gt;
          &lt;li&gt;Boolean&lt;/li&gt;
          &lt;li&gt;Null&lt;/li&gt;
          &lt;li&gt;Undefined&lt;/li&gt;
          &lt;li&gt;Number&lt;/li&gt;
          &lt;li&gt;String&lt;/li&gt;
          &lt;li&gt;Symbol (ECMAScript 6에 추가됨)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;별도로 Object도 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;산술연산자
    &lt;ul&gt;
      &lt;li&gt;+, -, * , /&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열
    &lt;ul&gt;
      &lt;li&gt;‘문자열’.length 와 같이 문자열과 관련된 도구들이 많다. 검색을 통해 많은 자료를 찾아볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;7-변수와-대입-연산자&quot;&gt;7. 변수와 대입 연산자&lt;/h1&gt;

&lt;p&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 1;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;x : 변수 variable&lt;/li&gt;
  &lt;li&gt;= : 대입 연산자&lt;/li&gt;
  &lt;li&gt;1 : 상수 constant&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;8-웹브라우저-제어&quot;&gt;8. 웹브라우저 제어&lt;/h1&gt;

&lt;h1 id=&quot;9-css기초--style-속성&quot;&gt;9. css기초 : style 속성&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;css의 핵심적인 것을 알아보자&lt;/li&gt;
  &lt;li&gt;아는 내용이라서 3강 skip&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;12-제어할-태그-선택하기&quot;&gt;12. 제어할 태그 선택하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;간단한 자바스크립트 실습&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;night&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
document.querySelector('body').style.backgroundColor = 'black';
document.querySelector('body').style.colopr = 'white';
&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
document.querySelector('body').style.backgroundColor = 'white';
document.querySelector('body').style.colopr = 'black';
&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;13-프로그램-프로그래밍-프로그래머&quot;&gt;13. 프로그램, 프로그래밍, 프로그래머&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;순서 -&amp;gt; 프로그램&lt;/li&gt;
  &lt;li&gt;순서를 만드는 것 -&amp;gt; 프로그래밍&lt;/li&gt;
  &lt;li&gt;순서를 만드는 사람 -&amp;gt; 프로그래머&lt;/li&gt;
  &lt;li&gt;순서대로 컴퓨터를 조작하는데에 컴퓨터를 주로 사용한다. 또한 이러한 것을 반복할 수 있는것이 컴퓨터&lt;/li&gt;
  &lt;li&gt;시간의 순서에 따라서, 실행되어야 할 기능을, 프로그래밍 언어의 문법에 맞게, 글로 적어두는 방식 -&amp;gt; 프로그램의 본질적인 목적&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;순서&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;조건&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;방법&lt;/code&gt;, 이러한것의 &lt;code class=&quot;highlighter-rouge&quot;&gt;정리정돈&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;앞으로는 본편적으로 프로그래밍 언어가 가지고 있는 기능들을 알아 볼 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;14-조건문-예고&quot;&gt;14. 조건문 예고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;예시 : toggle&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
if(document.querySelector('body').dataset.mode === 'day'){
document.querySelector('body').style.backgroundColor = 'black';
document.querySelector('body').style.colopr = 'white';
document.querySelector('body').dataset.mode = 'night';
this.value = 'day';
} else {
document.querySelector('body').style.backgroundColor = 'white';
document.querySelector('body').style.colopr = 'black';
document.querySelector('body').dataset.mode = 'day';
this.value = 'night';
}
&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;15-비교-연산자와-블리언&quot;&gt;15. 비교 연산자와 블리언&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;16-조건문&quot;&gt;16. 조건문&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;17-조건문의-활용&quot;&gt;17. 조건문의 활용&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;night_day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
if(document.querySelector('#night_day').value === 'night'){
document.querySelector('body').style.backgroundColor = 'black';
document.querySelector('body').style.colopr = 'white';
document.querySelector('#night_day').value === 'day'
this.value = 'day';
} else {
document.querySelector('body').style.backgroundColor = 'white';
document.querySelector('body').style.colopr = 'black';
document.querySelector('#night_day').value === 'night'
this.value = 'night';
}
&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;18-리팩토링-중복의-제거&quot;&gt;18. 리팩토링 중복의 제거&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;코드 개선작업&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가독성, 유지보수 편리하게, 중복제거&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
var target = document.querySelector('body');
if(this.value === 'night'){
target.style.backgroundColor = 'black';
target.style.colopr = 'white';
this.value = 'day';
} else {
target.style.backgroundColor = 'white';
target.style.colopr = 'black';
this.value = 'night';
}
&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;코딩을 잘하는 방법 하나 소개 - 중복을 끝까지 찾아가서 제거하라! 많은 기술들이 중복을 제거하기 위해 탄생했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;19-반복문-예고&quot;&gt;19. 반복문 예고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'powderblue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;20-배열&quot;&gt;20. 배열&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;21-반복문&quot;&gt;21. 반복문&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;22-배열과-반복문&quot;&gt;22. 배열과 반복문&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var coworkers = ['egoing', 'leezche', 'duru', 'teaho'];
var i = 0;
while(i &amp;lt; coworkers.length){
    document.write('&amp;lt;li&amp;gt;'+coworkers[i]+'&amp;lt;/li&amp;gt;');
    i = i +1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;23-배열과-반복문의-활용&quot;&gt;23. 배열과 반복문의 활용&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'powderblue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;24-함수예고&quot;&gt;24. 함수예고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;25-함수&quot;&gt;25. 함수&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
  &lt;li&gt;함수의 기본사항&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;26--함수--매개변수와-인자&quot;&gt;26.  함수 : 매개변수와 인자&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;27-함수리턴&quot;&gt;27. 함수(리턴)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;28-함수의-활용&quot;&gt;28. 함수의 활용&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;29-객체-예고&quot;&gt;29. 객체 예고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 여러가지 특성중에서 한가지만 이야기 할 것입니다. 객체에 대한 느낌을 가지고 확장해 나가시면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연관된 함수와 변수를 잘 정리하기 위한 도구&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;함수명이 겹친다면 나중에 쓴 함수가 기존의 함수를 덮어씌운다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinksSetColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BodySetColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BodySetBackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nightDayHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'night'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;BodySetBackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;BodySetColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;LinksSetColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'powderblue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;BodySetBackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;BodySetColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'night'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;30-객체-쓰기와-읽기&quot;&gt;30. 객체 쓰기와 읽기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;programmer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;egoing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;designer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;leezche&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;programmer : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;designer : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;designer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bookkeeper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;duru&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bookkeeper : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bookkeeper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data scientist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;teaho&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data scientist : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data scientist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;31-객체와-반복문&quot;&gt;31. 객체와 반복문&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' : '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;32-객체프로퍼티와-메소드&quot;&gt;32. 객체프로퍼티와 메소드&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAlll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' : '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;coworkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;33-객체의-활용&quot;&gt;33. 객체의 활용&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setBackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  	  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 	   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 	   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  	      &lt;span class=&quot;nx&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   	      &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;34-파일로-쪼개서-정리-정돈하기&quot;&gt;34. 파일로 쪼개서 정리 정돈하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2배속으로 빠르게 보고 넘어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;35-라이브러리와-프래임워크&quot;&gt;35. 라이브러리와 프래임워크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;비슷하긴 하지만 약간 뉘앙스가 다르다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;library&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;부품이 되는 소프트웨어를 재사용하기 쉽도록 정리되어있는 느낌&lt;/li&gt;
      &lt;li&gt;라이브러리를 땡겨와서 쓰는 느낌&lt;/li&gt;
      &lt;li&gt;ex - jQuery&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;framework&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;공통적인 부분을 프래임웍을 통해서 만들고 달라지는 부분을 조금씩 다르게 함으로서 우리가 만들고자 하는 것을 첨음부터 만들지 않아도 되게 해주는 것, 반재품과 같은 느낌&lt;/li&gt;
      &lt;li&gt;프래임워크에 들어가서 사용하는 느낌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jQuery&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  		&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;36-ui-vs-api&quot;&gt;36. UI vs API&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;UI
    &lt;ul&gt;
      &lt;li&gt;사용자가 시스템을 제어하기 위해서 사용하는 조작장치&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;API
    &lt;ul&gt;
      &lt;li&gt;애플리케이션을 만들기 위해서 프로그래밍을 할 때 사용하는 조작장치&lt;/li&gt;
      &lt;li&gt;모든 프로그래밍 언어에 해당되는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;37-종강&quot;&gt;37. 종강&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트를 시작하세요!&lt;/li&gt;
  &lt;li&gt;시작이 늦어질수록, 공부가 길어질 수록 자신이 짠 코드를 긍정하기 어려워 집니다.&lt;/li&gt;
  &lt;li&gt;프로젝트를 시작하기 전 조언
    &lt;ol&gt;
      &lt;li&gt;모든 기능을 총동원 하려 하지 마세요, 필수 불가결한 최소한의 도구를 가지고 문제를 해결해 보세요&lt;/li&gt;
      &lt;li&gt;최소한의 도구로 사용하다가 한계에 부딧치는 순간 다른 개념들을 사용해보며 각각의 관계에 익숙해지다 보면 -&amp;gt; 유창하게 다른 개념들을 사용할 수 있게 되는데&lt;/li&gt;
      &lt;li&gt;이렇게 하다가 다시 한계에 부딧치게 된다. 그럼 그때가 다시 공부를 시작할 때&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="record" /><summary type="html">수업을 시작하며</summary></entry><entry><title type="html">독하게시작하는c프로그래밍</title><link href="http://localhost:4000/2018-03-24/%EB%8F%85%ED%95%98%EA%B2%8C%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94c%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D" rel="alternate" type="text/html" title="독하게시작하는c프로그래밍" /><published>2018-03-24T00:00:00+09:00</published><updated>2018-03-24T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-24/%EB%8F%85%ED%95%98%EA%B2%8C%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94c%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</id><content type="html" xml:base="http://localhost:4000/2018-03-24/%EB%8F%85%ED%95%98%EA%B2%8C%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94c%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">&lt;h1 id=&quot;제1장-c프로그래밍-입문&quot;&gt;제1장 c프로그래밍 입문&lt;/h1&gt;

&lt;h3 id=&quot;오류해결-사례&quot;&gt;오류해결 사례&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f7&lt;/code&gt;키를 통해서 빌드할 때 아래와 같은 에러 발생&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;c:\apiexam\firsts\firsts\firsts.cpp(46): fatal error C1010: 미리 컴파일된 헤더를 찾는 동안 예기치 않은 파일의 끝이 나타났습니다. ‘#include “StdAfx.h”‘을(를) 소스에 추가하시겠습니까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;검색을 통해 문제 해결
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/ko-KR/cc067d9f-3c6e-4ca6-a5ce-68114a428da3/visual-c-487164630044032-50504461214576845796?forum=visualcplusko&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;해결방법
        &lt;ol&gt;
          &lt;li&gt;프로젝트의 솔루션 탐색기 창에서 마우스 오른쪽 단추로 프로젝트 이름을 클릭한 다음 속성을 클릭합니다.&lt;/li&gt;
          &lt;li&gt;왼쪽 창에서 C/C++ 폴더를 클릭합니다.&lt;/li&gt;
          &lt;li&gt;미리 컴파일된 헤더 노드를 클릭합니다.&lt;/li&gt;
          &lt;li&gt;오른쪽 창에서 미리 컴파일된 헤더 만들기/사용을 클릭한 다음 미리 컴파일된 헤더 사용 안 함을 클릭합니다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;강의-중-기록사항&quot;&gt;강의 중 기록사항&lt;/h3&gt;

&lt;p&gt;강의중 나온 단축키 설명&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f7&lt;/code&gt;  : 빌드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;f5&lt;/code&gt; : 디버깅 하지 않고 실행 (내용을 확이할 수 있도록 실행 결과가 창에 떠있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;제3장-표준-입출력-도구-첫-번째&quot;&gt;제3장 표준 입/출력 도구 첫 번째&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ux의 시대에도 cli와 같은 근본적인 입출력은 잘 알아야 한다. 결국 정보란 문자열이기 때문에&lt;/li&gt;
  &lt;li&gt;getchar()
    &lt;ul&gt;
      &lt;li&gt;어디서 어떻게 가져오는지 알아보자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컴퓨터의 구조에 대해서 생각해 보자
    &lt;ul&gt;
      &lt;li&gt;컴퓨터
        &lt;ul&gt;
          &lt;li&gt;하드웨어&lt;/li&gt;
          &lt;li&gt;소프트 웨어
            &lt;ul&gt;
              &lt;li&gt;시스템 소프트웨어 (ex: os)&lt;/li&gt;
              &lt;li&gt;응용 소프트웨어&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;컴퓨터의 계층(국가를 예시로 영토, 정부, 가구로 설명함)
        &lt;ol&gt;
          &lt;li&gt;하드웨어&lt;/li&gt;
          &lt;li&gt;커널 os
            &lt;ul&gt;
              &lt;li&gt;디바이스를 제어하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;디바이스 드라이버&lt;/code&gt; 커널 소프트웨어&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;유저 user/ 프로세스
            &lt;ul&gt;
              &lt;li&gt;프로세스는 각각의 영역을 보장 받는다.&lt;/li&gt;
              &lt;li&gt;그러나 프로세스가 할당받은 영역을 제어할 수 있는 소프트웨어가 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;디버거&lt;/code&gt;라고 한다.&lt;/li&gt;
              &lt;li&gt;다른프로세스의 메모리를 변조하는 공격을 메모리 해킹이라고 하는데 이것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;디버거&lt;/code&gt;로 한다. 또한 소프트웨어의 문제를 해결하는 것 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;디버거&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;유저모드에서 커널모드로의 진입은 불가&lt;/li&gt;
              &lt;li&gt;커널과 연결할 수 있는 추상화된 인터페이스 -&amp;gt; 파일(File)&lt;/li&gt;
              &lt;li&gt;파일은 파일마다 고유한 입출력 버퍼를 가지고 있다. (즉 메모리를 가지고 있다.)
                &lt;ol&gt;
                  &lt;li&gt;write
                    &lt;ul&gt;
                      &lt;li&gt;ex) putchar(‘A’)를 할 경우 ‘A’라는 버퍼를 체우게 되는데 이것을 버퍼링이라고 한다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;read
                    &lt;ul&gt;
                      &lt;li&gt;ex) getchar()함수는 버퍼로 부터 한 글자를 퍼올리는역할을 한다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ol&gt;
              &lt;/li&gt;
              &lt;li&gt;파일을 알맞은 규칙에 맞게 작성해서 커널로 전달하면 커널이 다시 하드웨어를 작동시킨다. 이때에 규칙이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;(protocol은 정보전달 규약)&lt;/li&gt;
              &lt;li&gt;파일 입출력의 다양한 규칙을 맞추기 어려우니 하나의 함수 형태로 만들어 놓은게 getchar(), putchar() 함수다.&lt;/li&gt;
              &lt;li&gt;만약 프로토콜이 TCP일 경우, 프로토콜 서비스를 추상화한 파일의 경우 특별하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;이라고 한다.&lt;/li&gt;
              &lt;li&gt;소켓은 정보를 수신할 때 언제 수신할지 모르기 때문에 비동기 방식을 체택한다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;c언어는 컴퓨터의 모든부분을 커버할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;입출력 (I/O)을 수행하는 주체 -&amp;gt; 커널&lt;/li&gt;
  &lt;li&gt;putchar() - 입출력을 요구하는 함수&lt;/li&gt;
  &lt;li&gt;입출력은 user모드 어플리케이션에서 요구하고 -&amp;gt; 커널이 입출력을 담당한다.&lt;/li&gt;
  &lt;li&gt;소캣프로그래밍을 잘하고 싶다면 시스템 프로그래밍 + file I/O + Protocol  이렇게 하면 된다.&lt;/li&gt;
  &lt;li&gt;putchar, getchar는 버퍼드I/O를 한다.&lt;/li&gt;
  &lt;li&gt;getchar()함수의 작동 과정
    &lt;ul&gt;
      &lt;li&gt;하드웨어에서(ex, 키보드) ‘hello’를 입력받으면 장치드라이버와 인터페이스를 통해 파일을 추상화 한 후 해당 파일로 부터 꺼내서 read를 하게 된다. 파일마다 I/O 버퍼가 존재한다. 버퍼에 ‘hello가 쌓이게 됨’ -&amp;gt; 이런 상황에서 getchar함수를 실행하면 ‘h’를 끄집어 내서 ‘char’형식으로 반환한다.  그런데 getchar함수의 원형은 int를 반환하게 되어있음 (char + int는 int가 된다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;버퍼와, 버퍼링
    &lt;ul&gt;
      &lt;li&gt;버퍼
        &lt;ul&gt;
          &lt;li&gt;메모리&lt;/li&gt;
          &lt;li&gt;데이터를 한 곳에서 다른 곳으로 전송하는 동안 일시적으로 그 데이터를 보관하는 메모리 영역&lt;/li&gt;
          &lt;li&gt;사전적 정의는 ‘완충기’&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;버퍼링
        &lt;ul&gt;
          &lt;li&gt;정보 전달 과정에서 정보를 소비하는 쪽에서 정보 전달에 문제가 생긴 상황을 모르게 하는 것&lt;/li&gt;
          &lt;li&gt;버퍼를 활용하는 방식 또는 버퍼를 채우는 동작을 말한다. 다른 말로는 ‘큐’라고도 표현한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논버퍼드 I/O
    &lt;ul&gt;
      &lt;li&gt;정보가 전달 될 때 복사되서 전달하는게 아니라 한번에 어떤 장치와 cpu가 직접 정보를 전달하게 되면 더 빠른 정보 전달이 가능하다.&lt;/li&gt;
      &lt;li&gt;DMA - Direct Memory Access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;버퍼드 I/O를 하는 함수
    &lt;ul&gt;
      &lt;li&gt;하드웨어 -&amp;gt; 콘솔 -&amp;gt; 파일을 통해 버퍼에 정보가 쌓인다.&lt;/li&gt;
      &lt;li&gt;getchar() - 버퍼에서 한글자씩 빼오는거&lt;/li&gt;
      &lt;li&gt;scanf() - 형식문자 규칙에 맞게 빼오는거 / 보안결함이 있기 때문에 scanf_s()를 사용하세요, 단 리눅스에는 없습니다. 윈도우에만 있습니다.&lt;/li&gt;
      &lt;li&gt;gets() - 버퍼에서 한줄씩 빼오는거 / 보안결함이 있기 때문에 gets_s()를 사용하세요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논버퍼드 I/O
    &lt;ul&gt;
      &lt;li&gt;-getch()&lt;/li&gt;
      &lt;li&gt;버퍼에서 정보를 읽어오는 것이 아니라, 하드웨어 에서의 인터럽트를 즉시wait하고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fflush()
    &lt;ul&gt;
      &lt;li&gt;버퍼를 비우는 함수&lt;/li&gt;
      &lt;li&gt;원래는 output만 되는데 윈도우는 input도 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="record" /><summary type="html">제1장 c프로그래밍 입문</summary></entry><entry><title type="html">생활코딩web3 ajax</title><link href="http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web3-Ajax" rel="alternate" type="text/html" title="생활코딩web3 ajax" /><published>2018-03-24T00:00:00+09:00</published><updated>2018-03-24T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web3%20Ajax</id><content type="html" xml:base="http://localhost:4000/2018-03-24/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9web3-Ajax">&lt;h1 id=&quot;수업을-시작하며&quot;&gt;수업을 시작하며&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ajax를 빠르게 알아보고 진행하는 프로젝트에 적용해보고자 해서 w3s 튜토리얼을 훑어본 후 생활코딩 강의도 빠르게 보면서 기본 개념들을 익혀 나가는 것이 목적&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-수업소개&quot;&gt;1. 수업소개&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;페이지 전체를 리로딩하지 않고 부분적으로 새로운 정보를 서버와 교환하기 위해 고안된 기술&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-1-수업의-목적&quot;&gt;2-1. 수업의 목적&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 입장에서는 필요한 부분만 변환되기 때문에 사용성 증대&lt;/li&gt;
  &lt;li&gt;서버와 웹브라우저의 자원을 절약할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-2-수업의-목적&quot;&gt;2-2. 수업의 목적&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Ajax를 활용한 웹페이지를 싱글페이지 애플리케이션이라고&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-실습환경-준비&quot;&gt;3. 실습환경 준비&lt;/h1&gt;

&lt;h1 id=&quot;4-동적으로-컨텐츠-변경하기&quot;&gt;4. 동적으로 컨텐츠 변경하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclik=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
    document.querySelector('article').innerHTML = '&amp;lt;h2&amp;gt;HTML&amp;lt;/h2&amp;gt;HTML is...';
    &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;파일에서 자료를 읽어오는건 다음시간에&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-0-fetch-api-사용법&quot;&gt;5-0. fetch API 사용법&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fetch&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
      fetch('css').then(function(response){
        response.text().then(function(text){
          document.querySelector('article').innerHTML = text;
          })
      })
    &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-1-fetch-api-요청과-응답&quot;&gt;5-1. fetch API 요청과 응답&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch('javascript')&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;서버로 javascript파일 달라고 요청하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.then(function)....&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;서버가 응답할 때 까지 기다리는 것(다른일을 하면서 기다릴 수 있)&lt;/li&gt;
      &lt;li&gt;응답을 받은 후에는 인자로 전달되어진 function을 실행시킨다.&lt;/li&gt;
      &lt;li&gt;비동기 적으로 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-2-fetch-api-response-객체&quot;&gt;5-2. fetch API-response 객체&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then(function)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;then안에 들어있는 함수는 익명함수라고 하며, then이 독점적으로 사용하기 위해 작성된 것이다.&lt;/li&gt;
      &lt;li&gt;function은 콜백함수라고 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;콜백함수를 실행 시킬 때에는 response객체를 인자로 전달하게 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;response.status&lt;/code&gt;를 활용해 상태정보를 가져올 수 있다.&lt;/li&gt;
  &lt;li&gt;response는 서버가 응답한 내용을 가지고 있는 객체, 여러가지 속성을 통해 정보를 확이할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;6-1-ajax의-활용&quot;&gt;6-1. ajax의 활용&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;html```
    &lt;li&gt;&lt;a onclik=&quot;
  fetch('html').then(function(response){
    response.text().then(function(text){
      document.querySelector('article').innerHTML = text;
      })
  })
  &quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
    &lt;p&gt;```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;6-2-리팩토링-함수화&quot;&gt;6-2. 리팩토링 함수화&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;html```
function fetchPage(name){
  fetch(name).then(function(response){
    response.text().then(function(text){
      document.querySelector(‘article’).innerHTML = text;
      })
      })
    }&lt;/p&gt;

    &lt;li&gt;&lt;a onclik=&quot;fetchPage('html')&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a onclik=&quot;fetchPage('css')&quot;&gt;css&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a onclik=&quot;fetchPage('javascript')&quot;&gt;javascript&lt;/a&gt;&lt;/li&gt;
    &lt;p&gt;```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;7-1-초기-페이지&quot;&gt;7-1. 초기 페이지&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ajax기능 구현에 나타나는 부작용을 완화해 나가는게 이번 수업&lt;/li&gt;
  &lt;li&gt;해쉬
    &lt;ul&gt;
      &lt;li&gt;다른 페이지로의 이동이 아닌 페이지 안에서 특정한 부분으로 접근하기 위한 url&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;#three&quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;p id=&quot;three&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;와 같이 anchor태그에 연관된 id값을 지정함으로써 기능을 구현할 수 있다.&lt;/li&gt;
      &lt;li&gt;해쉬값에 따라서 ajax를 통해 시작되는 페이지를 세팅할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;7-2-초기페이지&quot;&gt;7-2. 초기페이지&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;해쉬뱅
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;#!three&quot;&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;다음에 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;를 붙이는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;를 뱅이라고 해서, 해쉬 뱅이라고 부른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ajax를 사용했을 경우에 문제가 검색엔진 최적화가 안된다.&lt;/li&gt;
  &lt;li&gt;다라서 해쉬뱅은 잘 사용하지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;pjax&lt;/code&gt;라는 것을 주로 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;8-1-글목록&quot;&gt;8-1. 글목록&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;글 list 항목들을 fetch 형식으로 바꾸기&lt;/li&gt;
  &lt;li&gt;html```
    &lt;ol id=&quot;nav&quot;&gt;&lt;/ol&gt;
    &lt;p&gt;fetch(‘list’).then(function(response){
  response.text().then(function(text){
    document.querySelector(‘#nav’).innerHTML = text;
    })
    })
```&lt;/p&gt;
    &lt;h1 id=&quot;8-2-글목록&quot;&gt;8-2. 글목록&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;html```
    &lt;ol id=&quot;nav&quot;&gt;&lt;/ol&gt;
    &lt;p&gt;fetch(‘list’).then(function(response){
  response.text().then(function(text){
    var items = text.split(‘,’);
    var i = 0;
    var tags = ‘’;
    while(i&amp;lt;items.length){
      var item = items[i];
      item = item.trim()
      var tag = ‘&amp;lt;li&amp;gt;&lt;a href=&quot;#!'+item+'&quot; onclick=&quot;fetchPage(\''+item+'\')&quot;&gt;‘+item+’&amp;lt;/li&amp;gt;’;
      tags = tags + tag;
      i = i + 1;
    }
    console.log(items);
    document.querySelector(‘#nav’).innerHTML = tags;
    })
    })
```&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;9-fetch-api-polyfill&quot;&gt;9. fetch API polyfill&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 ajax방식은 XMLHttpRequest방식을 사용했는데 fetch가 더 최신의 강력한 기술이기 때문에 이것을 중심으로 공부 했다.&lt;/li&gt;
  &lt;li&gt;하지만 브라우저 호환성 문제가 있기 때문에 데이터를 기반으로 판단해야 한다. (can i use라는 홈페이지에서 호환성 확인 가능)&lt;/li&gt;
  &lt;li&gt;과거의 브라우저까지 모두 지원할 수 있는 방법이 polyfill&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;10-수업을-마치며&quot;&gt;10. 수업을 마치며&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;앞으로 공부할 만한 주제에 대한 소개&lt;/li&gt;
  &lt;li&gt;xml, json, Single Page Application(SPA), PJAX(ajax를 사용하면서도 검색엔진에 노출될 수있는 기술), Progressive Web Apps(spa의 발전된 형태, 웹+offline에서도 동작할 수 있게 만드는 기술)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="record" /><summary type="html">수업을 시작하며</summary></entry><entry><title type="html">기술면접준비</title><link href="http://localhost:4000/2018-03-23/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84" rel="alternate" type="text/html" title="기술면접준비" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-23/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84</id><content type="html" xml:base="http://localhost:4000/2018-03-23/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;면접을 위해 따로 공부하는 것 보다는, 열심히 공부한 내용을 바탕으로 면접에서 내 능력을 잘 보여주는 것을 더 선호한다. 면접을 위한 공부가 취업 말고는 무슨 필요가 있겠냐는 생각을 가지고 있었다. 그런데 개발자로 이직하기 위해서 면접을 준비하면서 느낀점은 기술면접의 경우 면접준비 자체가 내 실력을 향상시키는 데에 도움이 되겠다는 생각을 가질 수 있었다. 단편적으로 ‘A는 B입니다.’라고 답변할 수도 있겠지만 한단계씩 더 깊이 물어보는 질문에 답변할 수 있으려면 기술에 대한 더 깊은 지식이 필요하기 때문이다.&lt;/p&gt;

&lt;p&gt;면접 준비를 단순히 면접만 준비하기 위한 것이 아니라, 개발자로서 일하기 위해 알고 있어야할 기본 지식들을 잘 공부할 수 있는 기회로서 면접준비 시간을 가져갈 생각이다. 그렇게 되기를 희망하면서 시작한다!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개별 항목 설명에 참고한 책, 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본적인 질문 리스트에 대한 참고 사이트
&lt;a href=&quot;http://hahahoho5915.tistory.com/16&quot;&gt;http://hahahoho5915.tistory.com/16&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;책 :
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;커니핸 교수의 Hello, Digital World&lt;/code&gt; / 제이펍 출판사&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하루3분 네트워크 교실&lt;/code&gt; / 영진닷컴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overloading과 Overriding에 대한 설명
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://itpangpang.xyz/105&quot;&gt;http://itpangpang.xyz/105&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session, Cookie, Cache
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://genesis8.tistory.com/220&quot;&gt;http://genesis8.tistory.com/220&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/80&quot;&gt;http://jeong-pro.tistory.com/80&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model - View - Controller 패턴
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&quot;&gt;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process와 Thread
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@kd4/3&quot;&gt;https://brunch.co.kr/@kd4/3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Socket
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://jkkang.net/unix/netprg/chap2/net2_1.html&quot;&gt;http://jkkang.net/unix/netprg/chap2/net2_1.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&quot;&gt;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&quot;&gt;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack, Queue, Deque
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wayhome25.github.io/cs/2017/05/28/algorithm/&quot;&gt;https://wayhome25.github.io/cs/2017/05/28/algorithm/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/97&quot;&gt;http://jeong-pro.tistory.com/97&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&quot;&gt;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot;&gt;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IaaS, PaaS, SaaS
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.bloter.net/archives/259518&quot;&gt;http://www.bloter.net/archives/259518&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database Index
    &lt;ul&gt;
      &lt;li&gt;[https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4)](https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;/em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4))&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lalwr.blogspot.kr/2016/02/db-index.html&quot;&gt;https://lalwr.blogspot.kr/2016/02/db-index.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://yagi815.tistory.com/288&quot;&gt;http://yagi815.tistory.com/288&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://parkbosung.tistory.com/11&quot;&gt;http://parkbosung.tistory.com/11&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체지향개발(OOP) 4가지 특성
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wayhome25.github.io/cs/2017/04/10/cs-11/&quot;&gt;https://wayhome25.github.io/cs/2017/04/10/cs-11/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oop-객체지향-프로그래밍&quot;&gt;OOP (객체지향 프로그래밍)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OOP란 Object-Oriented-Programming의 약어로써 객체지향 프로그래밍을 의미한다.  데이터를 객체로 취급하여 프로그램에 반영한 것이며, 순차적으로 프로그램이 동작하는 기존의 것들(절차지향 프로그래밍 예: C언어)과는 다르게 객체와 객체의 상호작용을 통해 프로그램이 동작하는 것을 말한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;OOP의 특징&lt;/li&gt;
  &lt;li&gt;객체지향 프로그래밍은 코드의 재사용성이 높다.&lt;/li&gt;
  &lt;li&gt;코드의 변경이 용이&lt;/li&gt;
  &lt;li&gt;직관적인 코드분석&lt;/li&gt;
  &lt;li&gt;개발속도 향상&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상속을 통한 장점 극대화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Object
 Object(객체)는 OOP에서 데이터(변수)와 그 데이터에 관련되는 동장(함수), 즉 절차, 방법, 기능을 모두 포함한 개념이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overloading-vs-overriding&quot;&gt;Overloading vs Overriding&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Overloading
    &lt;ul&gt;
      &lt;li&gt;한 클래스 안에서 같은 이름의 메소드를 여러개 정의하는 것&lt;/li&gt;
      &lt;li&gt;매개변수의 타입이 다르거나 개수가 달라야 한다.&lt;/li&gt;
      &lt;li&gt;기본적으로 메소드의 이름이 같기 때문에 매개변수의 타입과 개수가 같다면 오류를 뱉는다. 이름이 같더라도 매개변수의 타입과 개수로 구분된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overriding
    &lt;ul&gt;
      &lt;li&gt;상속에서 나온 개념&lt;/li&gt;
      &lt;li&gt;상위 클래스(부모 클래스)의 메소드를 하위 클래스(자식 클래스)에서 재정의&lt;/li&gt;
      &lt;li&gt;이미 존재하는 클래스를 약간만 변경하여 사용하고자 할 경우 새로 클래스를 만드는 것이 아니라 기존 클래스를 상속받아서 기능을 추가하거나 변경하여 사용하는데 이 때 기존 클래스의 기능을 상속 받는 것을 Overriding이라고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-cookie-cache&quot;&gt;Session, Cookie, Cache&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;HTTP 프로토콜은 무상태(stateless)다. 이는 HTTP 서버가 클라이언트 요청에 대해 아무것도 기억하지 않아도 된다는 것을 뜻하는 약간의 전문 용어다. 서버는 요청된 페이지를 반환한 후 각 데이터 교환의 모든 기록을 폐기해도 된다.&lt;/li&gt;
      &lt;li&gt;세션과 쿠키의 차이점을 크게 보자면, 쿠키는 상태정보를 클라이언트에 저장하는 방식이고, 세션은 상태정보를 웹 서버에 저장하는 방식이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cookie
    &lt;ul&gt;
      &lt;li&gt;1994년에 넷스케이프가 &lt;code class=&quot;highlighter-rouge&quot;&gt;쿠키&lt;/code&gt;라는 해결책을 발명했다.&lt;/li&gt;
      &lt;li&gt;서버가 웹페이지를 브라우저에 보낼 때, 거기에는 브라우저가 저장하기로 되어 있는 부가적인 텍스트 덩어리들(각각 최대 약 4,000바이트)이 포함 될 수 있다. 각 덩어리를 쿠키라고 하다. 브라우저가 차후에 같은 서버에 요청을 보낼 때, 브라우저는 쿠키를 다시 전송한다. 실제로 서버는 클라이언트의 메모리를 사용하여 클라이언트의 이전 방문에 대한 정보를 기억하는 셈이다.&lt;/li&gt;
      &lt;li&gt;각 쿠키에는 이름이 있으며, 단일 서버에 방문할 때마다 여러개의 쿠키가 저장될 수 있다.&lt;/li&gt;
      &lt;li&gt;쿠키느 프로그램이 아니며, 액티브 콘텐츠가 없다. 쿠키는 완전히 수동적이다.&lt;/li&gt;
      &lt;li&gt;쿠키는 저장됐다가 이후에 다시 전송되는 문자열일 뿐이고, 서버에서 비롯하지 않은 어떤 것도 그 서버로 돌아가지 않는다.&lt;/li&gt;
      &lt;li&gt;쿠키는 자신이 유래한 도메인으로만 전송된다.&lt;/li&gt;
      &lt;li&gt;쿠키는 유효기간이 있어서 그 이후에는 브라우저에 의해 삭제된다. 브라우저가 실제로 쿠키를 받아들이거나 반환해야 한다는 요구 사항은 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session
    &lt;ul&gt;
      &lt;li&gt;쿠키는 모든 정보를 브라우저에 저장하기 때문에 보안상의 이슈가 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션은 사용자를 확인 할 수 있는 식별자만 쿠키의 형태로 브라우저에 저장하고, 그와 관련된 데이터는 서버의 데이터베이스에 저장하는 형태다.&lt;/li&gt;
      &lt;li&gt;session-id를 탈취당할 우려가 있기 때문에 보안적인 문제가 여전히 남아있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cache
    &lt;ul&gt;
      &lt;li&gt;Cache란 웹페이지 Resource파일들(오디오, 비디오, 이미지 등)의 임시 저장소로 브라우저에 저장된다.&lt;/li&gt;
      &lt;li&gt;다음에 같은 웹페이지(혹은 웹사이트)로 접속시 이미 리소스 파일들이 브라우저에 저장되어 있기 때문에, 페이지 로딩 속도를 개선해 준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session과 Cookie의 비교
    &lt;ul&gt;
      &lt;li&gt;쿠키는 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아있을 수 있다. 또한 만료기간을 넉넉하게 잡아두면 쿠기삭제를 할 때 까지 유지될 수도 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관 없이 삭제된다.&lt;/li&gt;
      &lt;li&gt;쿠키에 정봑 있기 때문에는 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mvc-패턴&quot;&gt;MVC 패턴&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Model - View - Controller 는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.&lt;/li&gt;
  &lt;li&gt;이 패턴을 성공적으로 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;MVC에서 모델은 애플리케이션의 정보(데이터)를 나타내며, 뷰는 텍스트, 체크박스 항목 등과 같은 사용자의 인터페이스 요소를 나타내고, 컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread와-process&quot;&gt;Thread와 Process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Process
    &lt;ul&gt;
      &lt;li&gt;운영체제에서 실행중인 하나의 프로그램 (하나 이상의 쓰레드를 포함한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thread
    &lt;ul&gt;
      &lt;li&gt;프로세스 내에서 동시에 실행되는 독립적인 실행 단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;프로세스는 운영체제로부터 자원을 할당받는 작업의 단위이고 스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위다. 프로세스는 실행될 때 운영체제로부터 프로세서를 할당받고, 운영되기 위해 필요한 주소 공간, 메모리 등 자원을 할당받는다. 스레드는 한 프로세스 내에서 동작되는 여러 실행의 흐름으로, 프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내에 스레드끼리 공유하면서 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 프로세스(멀티 프로세스)로 할 수 있는 작업을 하나의 프로세스에서 스레드로 나눠서 하는 이유
    &lt;ul&gt;
      &lt;li&gt;결론적으로는 운영체제는 시스템 작업을 효율적으로 관리하기 위한 것이므로 이 목적을 달성하기 위해 스레드를 사용하는 것&lt;/li&gt;
      &lt;li&gt;프로세스로 실행되는 작업을 멀티 스레드로 실행할 경우, 프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있다. 뿐만 아니라 프로세스 간의 통신보다 스레드 간의 통신의 비용이 적으므로 작업들 간의 통신의 부담이 줄어들게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스레드 활용의 단점
    &lt;ul&gt;
      &lt;li&gt;스레드를 활용하면 자원의 효율성이 증가하기도 하지만 스레드 간의 자원 공유는 전역 변수를 이용하므로 동기화 문제에 신경을 써야한다. (각별한 주의 요구됨)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;socket&quot;&gt;Socket&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;소켓은 1982년 BSD(Berkeley Software Distribution) UNIX 4.1에서 처음 소개되었으며 현재 널리 사용되고 있는 것은 BSD UNIX 4.3에서 개정된 것이다.&lt;/li&gt;
  &lt;li&gt;소프트웨어가 서로 연결하려면 소켓 연결이 필요하다. 소켓은 두 시스템 사이의 네트워크 연결을 나타내는 객체다. 우선적으로 소프트웨어가 연결이 되려면 가장 중요한 것은 두 소프트웨어가 상대방과 통신하는 방법, 즉 상대방에게 비트를 보내는 방법을 알고 있어야만 한다. 소켓 연결은 두 시스템 간의 정보를 연결한다는 것을 의미한다. 그 정보에는 네트워크 주소(IP주소)와 포트번호도 포함되어 있고 이것들을 통해서 소켓을 개설할 수 있다.&lt;/li&gt;
  &lt;li&gt;소켓은 소프트웨어로 작성된 통신 접속점이라고 할 수 있는데 네트웍 응용 프로그램은 소켓을 통하여 통신망으로 데이터를 송수신하게 된다.&lt;/li&gt;
  &lt;li&gt;네트워크 소켓은 컴퓨터 네트워크를 경유하는 프로세스 간 통신의 종착점이다.(위키백과)&lt;/li&gt;
  &lt;li&gt;네트워크 계층을 기준으로 보자면 소켓은 응용프로그램과 트랜스포트 계층 사이에서 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;소켓은 응용프로그램에서 TCP/IP를 이용하는 창구 역할을 하며 응용 프로그램과 소켓 사이의 인터페이스를 ‘소켓 인터페이스’라고 한다.&lt;/li&gt;
  &lt;li&gt;한 컴퓨터 내에는 보통 한 세트의 TCP/IP가 수행되고 있으며, 네트웍 드라이버는 LAN카드와 같은 네트웍 접속장치(NIU: Network Interface Unit)를 구동하는 소프트웨어를 말한다.&lt;/li&gt;
  &lt;li&gt;포트번호는 TCP/IP가 지원하는 상위 계층의 프로세스를 구분하기 위한 번호이므로 하나의 컴퓨터내에 있는 응용 프로세스들은 반드시 서로 다른 포트번호를 사용하여야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-queue-deque&quot;&gt;Stack, Queue, Deque&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;선형, 비선형
    &lt;ul&gt;
      &lt;li&gt;자료구조란 컴퓨터에서 처리할 자료를 효율적으로 관리하고 구조화시키기 위한 것. 즉 자료를 효율적으로 사용하기 위해 자료의 특성에 따라 분류하여 구성하고 저장 및 처리하는 모든 작업을 의미&lt;/li&gt;
      &lt;li&gt;자료구조는 정렬을 하거나 검색을 할 때, 인덱스 처리를 하거나 파일편성을 할 때 이용된다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/23202B4C53FDC5600C74C3&quot; alt=&quot;자료구조&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 한 곳(방향)으로 제한한 자료구조&lt;/li&gt;
      &lt;li&gt;선입선출(LIFO) 구조, push(), pop()&lt;/li&gt;
      &lt;li&gt;함수의 콜스택에 쓰이고 문자열을 역순으로 출력할 때, 연산자 후위표기법등에 쓰인다.&lt;/li&gt;
      &lt;li&gt;활용 예시: undo나 이전페이지 돌아가는것, 웹브라우저 방문기록, 역순 문자열 만들기&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/2214C14C53FDC5601E1C35&quot; alt=&quot;스택&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력이 각각 양 끝에서 이루어진 자료구조&lt;/li&gt;
      &lt;li&gt;후입선출(FiFO)구조 put(), get()&lt;/li&gt;
      &lt;li&gt;일반적인 큐의 단점: 큐에 메모리가 남아 있어도 꽉 차있는 것으로 판단할 수 있음 rear가 배열의 끝에 도달했을 경우 -&amp;gt; 개선된 원형 큐가 나옴&lt;/li&gt;
      &lt;li&gt;원형큐의 단점: 메모리 공간은 잘 활용하나 배열로 구현되어 있기 때문에 큐의 크기가 제한된다. -&amp;gt; 링크드리스트로 큐가 나옴&lt;/li&gt;
      &lt;li&gt;링크드리스트로 구현한 큐는 큐의 크기가 제한이 없고 삽입, 삭제가 편리하다.&lt;/li&gt;
      &lt;li&gt;활용 예시: 우선순위가 같은 작업 예약(인쇄 대기열), 콜센터 고객 대기 시간&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/2519EA4C53FDC5611706C9&quot; alt=&quot;큐&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deque
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 약 쪽 끝에서 가능하게 하는 자료구조&lt;/li&gt;
      &lt;li&gt;스크롤(scroll): 입력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;셸프(shelf): 출력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/221D914C53FDC56011326E&quot; alt=&quot;덱&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;도커란?
    &lt;ul&gt;
      &lt;li&gt;도커란 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 다양한 프로그램, 실행환경을 컨테이너로 추상화 하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.&lt;/li&gt;
      &lt;li&gt;서버운영에 필요한 모든 것을 도커를 활용해 가상환경으로 만들어서 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨테이너(가상머신과의 차이점)
    &lt;ul&gt;
      &lt;li&gt;컨테이너는 격리된 공간에서 프로세스가 동작하는 기술이다. 가상화 기술의 하나지만 기존 방식과는 차이가 있다.&lt;/li&gt;
      &lt;li&gt;기존의 가상머신은 호스트 OS위에 게스트 OS전체를 가상화하여 사용하는 방식이다. 무겁고 느려서 운영환경에선 사용할 수 없었다.&lt;/li&gt;
      &lt;li&gt;이러한 상황을 개선하기 위해 CPU의 가상화 기술(HVM)을 이용한 KVM(Kernel-based Virtual Machine)과 반가상화(Paravirtualization)방식의 Xen이 등장한다. 이러한 방식은 게스트 OS가 필요하긴 하지만 전체 OS를 가상화하는 방식이 아니였기 때문에 호스트형 가상화 방식에 비해 성능이 향상되었다. 이러한 기술들은 클라우드 서비스에서 가상 컴퓨팅 기술의 기반이 되었다.&lt;/li&gt;
      &lt;li&gt;전가상화든 반가상화든 추가적인 OS를 설치하여 가상화하는 방법은 어쨌든 성능문제가 있었고 이를 개선하기 위해 프로세스를 격리 하는 방식이 등장한다. 리눅스 에서는 이 방식을 리눅스 컨테이너라고 하고 단순히 프로세스를 격리시키기 때문에 가볍고 빠르게 동작한다. CPU나 메로리는 딱 프로세스가 필요한 만큼만 추가로 사용하고 성능적으로도 거의 손실이 없다.&lt;/li&gt;
      &lt;li&gt;이러한 컨테이너라는 개념은 도커가 처음 만든 것은 아니었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지
    &lt;ul&gt;
      &lt;li&gt;도커에서 가장 중요한 개념은 컨테이너와 함께 이미지라는 개념이다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다. 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iaas-paas-saas&quot;&gt;IaaS, PaaS, SaaS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;최초 클라우드 서비스는 지메일이나 드롭박스, 네이버 클라우드처럼 소프트웨어를 웹에서 쓸 수 있는 SaaS가 대부분이었다. 그러다가 서버와 스토리지, 네트워크 같은 컴퓨팅 인프라 장비를 빌려주는 IaaS, 플랫폼을 빌려주는 PaaS로 늘어났다. 클라우드 서비스는 어떤 자원을 제공하느냐에 따라 이처럼 크게 3가지로 나뉜다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bloter.net/wp-content/uploads/2016/07/cast2_iaas-paas-saas.jpg&quot; alt=&quot;참고그림&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SaaS가 이미 만들어진 레고 모형, IaaS가 레고 공장이라면, PaaS는 레고 블럭이라 할 수 있다.&lt;/li&gt;
  &lt;li&gt;SaaS : SaaS는 클라우드 환경에서 운영되는 애플리케이션 서비스를 말한다. 모든 서비스가 클라우드에서 이뤄진다. 소프트웨어를 구입해서 PC에 설치하지 않아도 웹에서 소프트웨어를 빌려쓸 수 있다.
SaaS는 필요할 때 원하는 비용만 내면 어디서든 곧바로 슬 수 있다는 장범이 있다. PC나 기업 서버에 소프트웨어를 설치할 필요가 없다. 소프트웨어 설치를 위해 비용과 시간을 들이지 않아도 된다. SaaS는 중앙에서 해당 소프트웨어를 관리하기 때문에 사용자가 일일이 업그레이드나 패치 작업을 할 필요도 없다.&lt;/li&gt;
  &lt;li&gt;PaaS : PaaS는 소프트웨어 서비스를 개발할 때 필요한 플랫폼을 제공하는 서비스다. 사용자는 PaaS에서 필요한 서비스를 선택해 애플리케이션을 개발하면 된다. PaaS 운영 업체는 개발자가 소프트웨어를 개발할 때 필요한 API를 제공해 개발자가 좀 더 편하게 앱을 개발할 수 있게 돕는다. 일종의 레고 블럭같은 서비스다. 개발자가 개발을 하는 데 필요한 도구와 환경을 사용하고, 사용한 만큼만 비용을 내기 때문에 개발자로선 비용 부담을 덜 수 있다. 단, 플랫폼 기반으로 애플리케이션을 개발하기 때문에 특정 플랫폼에 종속될 수 있다는 단점이 있다. A 서비스 업체의 PaaS에서 앱을 개발하고 이 작업을 이어서 B 외사의 PaaS에서 하기가 쉽지 않다는 뜻이다. 다양한 플랫폼에서 작업하려면 이에 맞게 앱을 수정하는 과정이 필요하다.
(컴퓨터 인프라를 클라우드로 제공하는 것에 더하여 애플리케이션을 가동하기 위한 플랫폼을 제공하는 것)&lt;/li&gt;
  &lt;li&gt;IaaS: 데이터센터를 구축하는 대신 클라우드를 이용해 필요한 컴퓨팅 인프라를 사용하는 걸 IaaS라고 부른다. 이용자는 서버나 스토리지를 구입,운영하는 비용을 줄일 수 있다. IaaS는 인터넷을 통해 서버와 스토리지 등 데이터센터 자원을 빌려 쓸 수 있는 서비스를 일컫는다. 이용자는 직접 데이터센터를 구축할 필요 없이 클라우드 환경에서 필요한 인프라를 꺼내 스면 된다. 이렇게 빌려온 인프라에서 사용자는 운영체제를 설치하고, 애플리케이션 등을 설치한 다음 원하는 서비스를 운영할 수 있다.
IaaS는 가상 서버, 데이터 스토리지 같은 기존 데이터센터가 제공하는 서비스를 제공한다. 사용자는 이런 서비스를 조합해 애플리케이션을 실행하거나 운영할 수 있다. 게다가 물리적으로 만들어진 환경이 아니기 때문에 사용하지 않을 때 시스템을 해체하는 것도 손쉽다.
(컴퓨터 인프라를 클라우드로 제공하는 것)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;database-index&quot;&gt;Database Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스는 데이터베이스 분야에 있어서 테이블에 대한 동작의 속도를 높여주는 자료 구조를 일컫는다. 인덱스는 테이블 내의 1개의 컬럼, 혹은 여러개의 컬럼을 이용하여 생성될 수 있다. 고속의 검색 동작뿐만 아니라 레코드 접근과 관련 효율적인 순서 매김 동작에 대한 기초를 제공한다. 인덱스를 저장하는 데 필요한 디스크 공간은 보통 테이블을 저장하는 데 필요한 디스크 공간보다 작다. (왜냐하면 보통 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목들은 갖고 있지 않기 때문이다.) 관계형 데이터베이스에서는 인덱스는 테이블 부분에 대한 하나의 사본이다.
(위키백과)&lt;/li&gt;
  &lt;li&gt;INDEX란
RDBMS에서 검색속도를 높이기 위해 사용하는 하나의 기술. INDEX는 색인이다. 해당 Table의 컬럼을 색인화(따로 파일로 저장)하여 검색시 해당 Table의 레코드를 모두 스캔하는게 아니라 색인화 되어있는 INDEX파일을 검색하여 검색속도를 빠르게 한다. 이런 INDEX는 Tree구조로 색인화 한다. RDBMS에서 사용하는 INDEX는 Balance Search Tree를 사용한다. 실제로 RDBMS에서 사용되는 B-Tree는 B-Tree에서 파생된 B+Tree를 사용한다고 한다.
(참고로 Oracle이나 MSSQL에서는 여러 종류의 Tree를 선택하여 사용가능하다.)&lt;/li&gt;
  &lt;li&gt;INDEX의 원리
INDEX를 해당 컬럼에 주게 되면 초기 Table생성시 만들어진 MYD, MYI, FRM 3개의 파일 중에서 MYI에 해당 컬럼을 색인화 하여 저장한다. 물론 INDEX를 사용하지 않을 시에는 MYI파일은 비어 있다. 그래서 INDEX를 해당컬럼에 만들게 되면 해당컬럼을 따로 인덱싱하여 MYI파일에 입력한다. 그래서 사용자가 SELECT쿼리로 INDEX가 사용하는 쿼리를 사용시 해당 Table을 검색하는 것이 아니라 빠른 Tree로 정리해둔 MYI파일의 내용을 검색한다. 만약 INDEX를 사용하지 않은 SELECT쿼리라면 해당 Table을 모두 스캔하여 검색한다. 이는 책의 뒷부분에 찾아보기와 같은 의미로 정리해둔 단어중에서 원하는 단어를 찾아서 페이지수를 보고 쉽게 찾을 수 있는 개념과 같다. 만약 이 찾아보기가 없다면 처음부터 끝까지 모든 페이지를 보고 찾아야 할 것이다.&lt;/li&gt;
  &lt;li&gt;INDEX의 장점
    &lt;ul&gt;
      &lt;li&gt;키 값을 기초로 하여 테이블에서 검색과 정렬 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;쿼리나 보고서에서 그룹화 작업의 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;인덱스를 사용하면 테이블 행의 공유성을 강화시킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;INDEX의 단점
    &lt;ul&gt;
      &lt;li&gt;인덱스를 만들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt;파일의 크기가 커진다.&lt;/li&gt;
      &lt;li&gt;여러 사용자가 사용하는 응용프로그램에서의 여러 사용자가 한 페이지를 동시에 수정할 수 있는 병행성이 줄어든다.&lt;/li&gt;
      &lt;li&gt;인덱스 된 필드에서 데이터를 업데이트하거나, 레코드를 추가 또는 삭제할 때 성능이 떨어진다.&lt;/li&gt;
      &lt;li&gt;인덱스가 데이터베이스 공간을 차지해 추가적인 공간이 필요해진다.(DB의 10퍼센트 내외의 공간이 추가로 필요)&lt;/li&gt;
      &lt;li&gt;데이터 변경 작업이 자주 일어날 경우에 인덱스를 재작성해야 할 필요가 있기에 성능에 영향을 끼칠 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DBMS
    &lt;ul&gt;
      &lt;li&gt;Data Base Management System&lt;/li&gt;
      &lt;li&gt;데이터베이스 관리 시스템(DBMS)은 다수의 사용자들이 데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합이다. DBMS는 사용자 또는 다른 프로그램의 요구를 처리하고 적절히 응답하여 데이터를 사용할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Balance Search Tree
    &lt;ul&gt;
      &lt;li&gt;트리구조의 높이를 작게 만들어 효율적으로 탐색할 수 있게끔 만든 구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MYD, MYI, FRM
    &lt;ul&gt;
      &lt;li&gt;MYD - Index정보가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;MYI - 실제 데이터가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;FRM - 테이블 구조가 저장되어 있는 파일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DDL, DML, DCL
    &lt;ul&gt;
      &lt;li&gt;DDL - 데이터베이스의 스키마 객체를 생성, 변경, 제거하거나 권한의 부여나 박탈, 주석, 자료의 버림 등을 수행하는 문장의 집단을 의미한다.&lt;/li&gt;
      &lt;li&gt;DML - 스키마 객체의 데이터를 입력, 수정, 조회, 삭제 하거나 테이블에 잠금을 설정하거나 SQL문의 처리에 대한 절차에 대한 정보를 얻거나 PL/-SQL 모듈을 호출하는 작업의 집단이다.&lt;/li&gt;
      &lt;li&gt;DCL - 데이터를 제어하는 언어, 데이터의 보안, 무결성, 회복, 병행 수행제어 등을 정의하는데 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;osi-모델&quot;&gt;OSI 모델&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;각 단계별 설명&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;계층&lt;/th&gt;
          &lt;th&gt; &lt;/th&gt;
          &lt;th&gt;내용&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;7 계층&lt;/td&gt;
          &lt;td&gt;응용계층&lt;/td&gt;
          &lt;td&gt;사용자에게 네트워크 서비스를 제공한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;6 계층&lt;/td&gt;
          &lt;td&gt;표현계층&lt;/td&gt;
          &lt;td&gt;데이터의 형식을 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5 계층&lt;/td&gt;
          &lt;td&gt;세션계층&lt;/td&gt;
          &lt;td&gt;데이터의 송수신의 순서 등을 관리한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4 계층&lt;/td&gt;
          &lt;td&gt;전송계층&lt;/td&gt;
          &lt;td&gt;신뢰성이 높은(에러가 적은)전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3 계층&lt;/td&gt;
          &lt;td&gt;네트워크계층&lt;/td&gt;
          &lt;td&gt;전송 규칙과 수신처를 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2 계층&lt;/td&gt;
          &lt;td&gt;데이터링크계층&lt;/td&gt;
          &lt;td&gt;인접기기 사이의 데이터 전송을 제어한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1 계층&lt;/td&gt;
          &lt;td&gt;물리계층&lt;/td&gt;
          &lt;td&gt;전기,기계적인 부분의 전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향개발oop-4가지-특성&quot;&gt;객체지향개발(OOP) 4가지 특성&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;추상화
    &lt;ul&gt;
      &lt;li&gt;공통의 속성이나 기능을 묶어 이름을 붙이는 것&lt;/li&gt;
      &lt;li&gt;OOP 에서 클래스를 정의하는 것을 추상화라고 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;캡슐화
    &lt;ul&gt;
      &lt;li&gt;변수와 함수를 하나로 묶어서 외부에서의 접근을 막고, 함수를 통해서만 접근 가능하도록 하는 것&lt;/li&gt;
      &lt;li&gt;객체가 맡은 역할을 수행하기 위한 데이터를 하나로 묶는다 (은닉화)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상속
    &lt;ul&gt;
      &lt;li&gt;상위 개념의 특징을 하위 개념이 물려 받는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다형성
    &lt;ul&gt;
      &lt;li&gt;부모 클래스로부터 물려받은 가상 함수를 자식 클래스 내에서 오버라이딩 하여 사용하는 것&lt;/li&gt;
      &lt;li&gt;다형성의 쉬운 예제는 Java의 오버로딩이다. 오버로딩은 같은 의미지만 매개변수의 데이터타입이 무엇이냐에 따라서 다른 메소드가 호출되는 방식이다. &lt;a href=&quot;https://opentutorials.org/course/1223/6127&quot;&gt;참고&lt;/a&gt; (참고로 파이썬은 오버로딩을 허용하지 않는다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="record" /><summary type="html">Intro</summary></entry><entry><title type="html">Project Sangsang</title><link href="http://localhost:4000/2018-03-23/PROJECT-SANGSANG" rel="alternate" type="text/html" title="Project Sangsang" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-23/PROJECT-SANGSANG</id><content type="html" xml:base="http://localhost:4000/2018-03-23/PROJECT-SANGSANG">&lt;h1 id=&quot;작은방-미술-교습소-상상-홈페이지를-만들며-남긴-기록입니다&quot;&gt;작은방 미술 교습소 ‘상상’ 홈페이지를 만들며 남긴 기록입니다.&lt;/h1&gt;

&lt;h2 id=&quot;진행사항에-대한-기록&quot;&gt;진행사항에 대한 기록&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;mdb free로 적용 안되는 기술 중 하나가 smmoth scroll, 대신에 w3s에서 알려주는 방법을 적용하면 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;찾아보지-않고도-기억하고-싶은-부트스트랩-클래스&quot;&gt;찾아보지 않고도 기억하고 싶은 부트스트랩 클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.sr-only&lt;/code&gt;
&lt;a href=&quot;https://getbootstrap.com/docs/4.0/utilities/screenreaders/&quot;&gt;문서&lt;/a&gt;에 보면 아래와 같이 확인할 수 있다.
    &lt;blockquote&gt;
      &lt;p&gt;Use screenreader utilities to hide elements on all devices except screen readers.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;페이지에 label 없이 input태그를 사용하려고 할 때 스크린리더와 관련된 문제가 생길 수 있다. 스크린리더가 페이지를 읽어 나갈 때 input태그에 label을 붙이지 않는다면 온란을 겪기 때문에 label을 붙여줘야 한다. 그래서 위와같은 문제를 &lt;code class=&quot;highlighter-rouge&quot;&gt;sr_only&lt;/code&gt;클래스를 통해 해결해주는 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mt-4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;my-5&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;mb-1&lt;/code&gt; 등
    &lt;ul&gt;
      &lt;li&gt;bootstrap의 spacing utilities에서 확인할 수 있다.&lt;a href=&quot;https://getbootstrap.com/docs/4.0/utilities/spacing/&quot;&gt;문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;첫 번째 단어는 mrgin과 padding을 구분하고 두 번째 단어는 방향을 가리킨다.&lt;/li&gt;
      &lt;li&gt;숫자는 정도의 차이를 가리킨다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w-25&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;h-50&lt;/code&gt;등
    &lt;ul&gt;
      &lt;li&gt;sizing에서 확인할 수 있다.&lt;a href=&quot;https://getbootstrap.com/docs/4.0/utilities/sizing//&quot;&gt;문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;요소의 크기를 조절 할 수 있는 도구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fa&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fa-book&lt;/code&gt;등
    &lt;ul&gt;
      &lt;li&gt;bootstrap아이콘을 사용하는 태그(font awesome icon)&lt;/li&gt;
      &lt;li&gt;mdb &lt;a href=&quot;https://mdbootstrap.com/content/icons-list/&quot;&gt;문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;화면에서-보여주는-것-중에-이름을-몰라서-검색이-어려웠던-웹-테크닉&quot;&gt;화면에서 보여주는 것 중에 이름을 몰라서 검색이 어려웠던 웹 테크닉&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Parallax(시차를 이용한 효과)
    &lt;ul&gt;
      &lt;li&gt;스크롤 하면 아래에 있는 요소가 위의 요소를 덮어나가는 것 같이 보이게 하는 기술&lt;/li&gt;
      &lt;li&gt;생활코딩에서 알려주는 웹 레시피에 관련 설명 &lt;a href=&quot;https://opentutorials.org/module/2398/13856&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;기본적으로 css에서 background의 이미지를 고정 시켜서 효과를 내는 것&lt;/li&gt;
      &lt;li&gt;mdb의 랜딩페이지 튜토리얼 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;background: url(&quot;./bg.jpg&quot;)no-repeat center center fixed;&lt;/code&gt;와 같이 background를 fixed 효과를 넣음으로서 parallax효과를 주었다.&lt;/li&gt;
      &lt;li&gt;생활코딩이나 w3s에서는&lt;code class=&quot;highlighter-rouge&quot;&gt;background-attachment: fixed;&lt;/code&gt;를 적용시켜서 관련 효과를 적용하는 방법을 선택했다.&lt;/li&gt;
      &lt;li&gt;랜딩페이지 튜토리얼의 방법은 속성으로 적용하는 방법이다. &lt;a href=&quot;https://www.w3schools.com/css/css_background.asp&quot;&gt;w3s에서 css background에 관한 설명 링크&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css-margin과-padding의-차이&quot;&gt;CSS margin과 padding의 차이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;둘다 여백을 활용하기 위한 공간&lt;/li&gt;
  &lt;li&gt;태그요소의 비어있는 공간을 넣어줄 때 사용한다&lt;/li&gt;
  &lt;li&gt;border를 기준으로 padding은 border의 안쪽에 위치, margin은 border의 바깥쪽에 위치
    &lt;ul&gt;
      &lt;li&gt;border는 box에서 경계면을 의미하며 경계면 안쪽은 콘텐츠에 포함된 영역이다.(background에 포함된 영역이 padding)&lt;/li&gt;
      &lt;li&gt;요소 경계면의 안쪽에 여백을 주느냐(padding), 요소 경계면의 바깥쪽에 여백을 주느냐(margin)에 따라 사용법을 구분할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;콘텐츠를 제외한 나머지 영역을 margin으로 보면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://veamcamp.com/cookbook/padding_margin/&quot;&gt;참고 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;div안에-있는-요소를-정렬하기수평정렬&quot;&gt;div안에 있는 요소를 정렬하기(수평정렬)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;align속성을 사용해서 정렬할 수 있다.&lt;/li&gt;
  &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div align=&quot;center&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;w3s의 내용설명 &lt;a href=&quot;https://www.w3schools.com/tags/att_div_align.asp&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="record" /><summary type="html">작은방 미술 교습소 ‘상상’ 홈페이지를 만들며 남긴 기록입니다.</summary></entry><entry><title type="html">Project News Collecter</title><link href="http://localhost:4000/2018-03-23/PROJECT-NEWS-COLLECTER" rel="alternate" type="text/html" title="Project News Collecter" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-23/PROJECT-NEWS-COLLECTER</id><content type="html" xml:base="http://localhost:4000/2018-03-23/PROJECT-NEWS-COLLECTER">&lt;h1 id=&quot;나만의-뉴스-스탠드-news-collecter-프로젝트를-진행하며-기록해-놓은-자료입니다&quot;&gt;나만의 뉴스 스탠드 NEWS-COLLECTER 프로젝트를 진행하며 기록해 놓은 자료입니다.&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Custom Homepage Project &lt;a href=&quot;https://www.news-collecter.com/&quot;&gt;www.news-collecter.com&lt;/a&gt;&lt;/strong&gt;
홈페이지로 쓰고자 직접 제작한 웹사이트 입니다.
주기적으로 포탈과 언론사의 메인 기사 제목을 10개정도씩 가져와 한 화면에 보여주는 사이트입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고한-사이트-모음&quot;&gt;참고한 사이트 모음&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/546960/HTML-Quick-Start-Web-Application&quot;&gt;html 레이아웃 관련&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;프로젝트 Github : https://github.com/zooozoo/homepage-project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if statement에서 else를 쓰는게 좋은지 아니면 그냥 return 하는게 좋은지에 관한 이야기, 속도나 기능적인 부분에서 차이는 없고
얼마나 읽기 편한지와같은 문제가 고려되는데 else를 쓰기보다는 바로 return하는 방식이 더 좋다는 의견이 많다. 관련 논쟁 스택오버플로우 링크
&lt;a href=&quot;https://stackoverflow.com/questions/14844531/is-it-preferable-to-use-an-else-in-python-when-its-not-necessary&quot;&gt;https://stackoverflow.com/questions/14844531/is-it-preferable-to-use-an-else-in-python-when-its-not-necessary&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/9191388/it-is-more-efficient-to-use-if-return-return-or-if-else-return&quot;&gt;https://stackoverflow.com/questions/9191388/it-is-more-efficient-to-use-if-return-return-or-if-else-return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-단계&quot;&gt;다음 단계&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;user과 화면에서 동적으로 언론사 배치순서를 조정할 수 있도록 만들기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;task.py 에서 버전 삭제로직 변경해야함 -&amp;gt; 전체를 삭제하는 것이 아닌 특정 버전 이하는 모두 삭제할 수 있게끔&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나중에-해야할-일&quot;&gt;나중에 해야할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;header 파트 레이아웃 리팩터링 필요
-&amp;gt; 부트스트랩 레이아웃 사용해서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;크롤링한 데이터에서 ‘문답’과 같은 요소들 없애기
-&amp;gt; 글자수에 조건을 걸어서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nav에 news_select_section에서 한글로 언론사이름 보여줄 수 있게 수정
-&amp;gt; filed에 verbose name 설정하고, index.html의 card header 부분에 field.name을 field.value로 변경해서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;main에 checkbox form에 initial data 전달하는거 더 효율적으로 할 수 있는지 살펴보기
-&amp;gt; model form 이기 때문에 데이터베이스에서 가져온 모델 인스턴스를 전달함으로써 initiated된 폼을 사용할 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;에러가 나면 데이터베이스에 있는 내용을 끌어올 수 있도록 만들기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;news-select-section에 있는 checkbox를 1열 래이아웃으로 바꾸기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;산발적으로 발생하는 에러 잡기
에러&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  File &quot;/home/zoozoo/projects/project-hp/my_homepage/main/utils.py&quot;, line 230, in khan_news_title
    title=soup.find('div', class_='topNews').a.text,
  AttributeError: 'NoneType' object has no attribute 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개발과정에-대한-기록&quot;&gt;개발과정에 대한 기록&lt;/h2&gt;

&lt;h3 id=&quot;배포를-위한-기본-세팅&quot;&gt;배포를 위한 기본 세팅&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;aws계정 생성&lt;/li&gt;
  &lt;li&gt;IAM 유저와, 보안그룹 생성&lt;/li&gt;
  &lt;li&gt;aws cli를 활용해 기본정보 등록&lt;/li&gt;
  &lt;li&gt;local 에서 postgres 연결 확인&lt;/li&gt;
  &lt;li&gt;settings 를 패키지로 만들고 deploy 와 dev용 setting 모듈 분리&lt;/li&gt;
  &lt;li&gt;RDS, S3와 연결되고 로컬에서 80번port로 접속 가능한 docker만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;docker를-만드는-과정에서-있었던-일&quot;&gt;docker를 만드는 과정에서 있었던 일&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker를 만드는 과정에서 basedocker를 새로 구성할 필요가 있어서 간단하게 새 명령어를 집어넣고 새로 buil를 하는데 pyenv를 의존성문제를 해결하기 위한 구성을 다울로드 하는 과정에 에러가 발생했다.

```
E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/t/tzdata/tzdata_2016j-0ubuntu0.16.04_all.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm2_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.3_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/libx/libxml2/libxml2_2.9.3+dfsg1-1ubuntu0.3_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/c/curl/curl_7.47.0-1ubuntu2.4_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-amdgpu1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-intel1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-nouveau2_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-radeon1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libglapi-mesa_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libgl1-mesa-dri_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libgl1-mesa-glx_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-dev_1.0.2g-1ubuntu4.8_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-doc_1.0.2g-1ubuntu4.8_all.deb  404  Not Found [IP: 91.189.88.152 80]

E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
The command '/bin/sh -c apt-get install -y make build-essential             libssl-dev zlib1g-dev libbz2-dev             libreadline-dev libsqlite3-dev wget             curl llvm libncurses5-dev libncursesw5-dev             xz-utils tk-dev' returned a non-zero code: 100
```

대략 이런 에러였는데 `apt-get update`부분을 살펴보니 이전에 같은 태그명으로 생성했던 적이 있어서 캐시를 사용해 build 하는 것을 확인했다. 캐쉬를 쓰지 않고 생으로 docker를 빌드하기 위한 명령어는 `--no-cache`명령어를 붙여주면 된다.
[관련 답변내용 link](https://stackoverflow.com/questions/35594987/how-to-force-docker-for-clean-build-of-an-image?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa)

설치중에 `debconf: delaying package configuration, since apt-utils is not installed`이런 에러가 있었는데 해당 내용이 [링크](https://github.com/phusion/baseimage-docker/issues/319)에서 논의된 적이 있었고 일단 빌드가 완성되는 것으로 보아 별 문제가 없다고 판단 계속 진행하도록 하겠다. (추후 무슨 문제가 생겼을 경우 해결하기 위한 기록)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;elasticbeanstalk-구축하기&quot;&gt;elasticbeanstalk 구축하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;키페어 profile 설정문제&lt;/p&gt;

    &lt;p&gt;awscli에서 사용하는 기본 프로파일은 환경변수로 설정되어 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_PROFILE=user2&lt;/code&gt;명령을 통해 환경변수를 설정함으로써 매번 profile을 지정하지 않아도 된다.
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-multiple-profiles.html&quot;&gt;관련링크&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;eb cli 환경에서 키페어 profile 설정문제&lt;/p&gt;

    &lt;p&gt;eb cli를 사용 할 경우 추가적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_EB_PROFILE=user2&lt;/code&gt; 명령을 통해 eb default 환경변수를 설정해 주어야만 한다
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/eb-cli3-configuration.html#eb-cli3-profile&quot;&gt;관련링크&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;elasticbeanstalk에서 최신버전의 docker를 지원하지 않아 발생하는 문제라고 생각 -&amp;gt; docker를 삭제하고 다시 설치하기로 결정&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;삭제하려고 하는데 docker를 찾지 못함 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg -l | grep -i docker&lt;/code&gt; 명령어로 설치된 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-ce&lt;/code&gt;확인후에 삭제
&lt;a href=&quot;https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;특정버전의 docker를 설치 &lt;a href=&quot;https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker를 재설치 해도 같은문제가 발생했고, 문제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;이 포함되어 있기 때문이었다. -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;.ebignore&lt;/code&gt;추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결론적으로는 docker의 버전이 다른게 문제가 되는지는 정확하기 확인하진 못했지만 그래도 일단 버전을 맞추는게 좋을 것으로 판단된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;request-한글-깨짐현상&quot;&gt;request 한글 깨짐현상&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Beautifulsoup 에서 깨지는걸로 생각했는데, request모듈에서의 encoding문제였다. 참고한 블로그와 사이트
  &lt;a href=&quot;http://sfixer.tistory.com/entry/python3-beautifulsoup-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90&quot;&gt;http://sfixer.tistory.com/entry/python3-beautifulsoup-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90&lt;/a&gt;
  &lt;a href=&quot;http://pythonstudy.xyz/python/article/403-%ED%8C%8C%EC%9D%B4%EC%8D%AC-Web-Scraping&quot;&gt;http://pythonstudy.xyz/python/article/403-%ED%8C%8C%EC%9D%B4%EC%8D%AC-Web-Scraping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;더 간단한 해결책 발견
  &lt;code class=&quot;highlighter-rouge&quot;&gt;request.text&lt;/code&gt; -&amp;gt; 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode&lt;/code&gt;로 가져옴
  &lt;code class=&quot;highlighter-rouge&quot;&gt;request.content&lt;/code&gt; -&amp;gt; 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;형으로 가져옴
  &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;형으로 가져오면 간단하게 문자를 사용할 수 있다.
  참고한 블로그
  &lt;a href=&quot;http://pwnbit.kr/85&quot;&gt;http://pwnbit.kr/85&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requestsexceptionstoomanyredirects-exceeded-30-redirects-에러-관련&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requests.exceptions.TooManyRedirects: Exceeded 30 redirects.&lt;/code&gt; 에러 관련&lt;/h3&gt;

&lt;h3 id=&quot;문자열에-탭이나-줄바꿈-문자-제거하는-것&quot;&gt;문자열에 탭이나, 줄바꿈 문자 제거하는 것&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10711116/strip-spaces-tabs-newlines-python/10711166#comment25234743_10711116&quot;&gt;stackoverflow 답변&lt;/a&gt;
  위의 답변들 중에 나는 아래의 방법으로 해결&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I want to Remove all white &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; spaces, new lines &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; and tabs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'I want to Remove all white spaces, new lines and tabs '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input태그를-disabled-처럼-보이게-만들고-readonly-처럼-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;태그를 disabled 처럼 보이게 만들고 readonly 처럼 사용하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7743208/making-a-text-input-field-look-disabled-but-act-readonly&quot;&gt;stackoverflow 답변&lt;/a&gt;처럼 해결 할 수도 있을 것 같다.
  다만 난 답변을 찾다가 django forms의 widget설정에서 readonly 옵션을 넣어봤더니 disabled와 같은 모습으로 템플릿에 나와서 그대로 사용했다.&lt;/p&gt;

&lt;h3 id=&quot;crawler_testpy-python-script에서-django의-model-을-import하여-실행하기-위한-세팅&quot;&gt;crawler_test.py python script에서 django의 model 을 import하여 실행하기 위한 세팅&lt;/h3&gt;

&lt;p&gt;django 자체를 import해서 어떤 환경변수를 설정해줘야만 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 내가 적용했던 세팅&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import os
  import django

  os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;my_homepage.settings&quot;)
  django.setup()

  from main.models import NewsTitle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15048963/alternative-to-the-deprecated-setup-environ-for-one-off-django-scripts?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;참고한 stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;celery-를-활용하여-크롤링한-데이터-저장하기&quot;&gt;celery 를 활용하여 크롤링한 데이터 저장하기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;celery beat를 활용 -&amp;gt; 폐기
    주기적으로 크롤링을 작동시켜서 크롤링한 데이터를 저장하려 했으나 elasticbeanstalk와 docker를 활용하여 배포할 경우 auto scaling시에 문제가 발생할 수 있다. (같은 ec2가 여러개 생길경우 인스턴스 갯수 마다 beat가 따로 동작하기 때문에 크롤링이 중복되는 문제 발생)
    -&amp;gt; 데이터 생성시간을 체크해서 일정시간이 지나지 않았으면 작동하지않게 할 수도 있다. -&amp;gt; que요청과 시간을 확인하는 로직은 항상 들어가야 하기 때문에 delay보다 자원이 더 낭비될 가능성이 크다.&lt;/li&gt;
  &lt;li&gt;celery delay 활용
    created time field를 활용해 request마다 데이터베이스의 크롤링 데이터가 stale 한 경우 delay로 크롤링작업 실행. concurrency 문제가 발생할 수 있기 때문에 celery task 작동시에 database lock을 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;celery-docker에서-작동해보기---폐기&quot;&gt;celery docker에서 작동해보기 -&amp;gt; 폐기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;default user는 locallhost환경으로만 접속가능하기 때문에 새로운 user를 만들어 줘야 한다.
    &lt;code class=&quot;highlighter-rouge&quot;&gt;rabbitmqctl add_user username password&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;aws-sqs를-활용하여-celery를-사용하기로-함&quot;&gt;aws sqs를 활용하여 celery를 사용하기로 함&lt;/h3&gt;
&lt;p&gt;celery 실행시 &lt;code class=&quot;highlighter-rouge&quot;&gt;pycurl&lt;/code&gt;을 설치하라고 함, &lt;code class=&quot;highlighter-rouge&quot;&gt;pycurl&lt;/code&gt; 을 설치하기 위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libcurl4-openssl-dev&lt;/code&gt; 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl4-openssl-dev&lt;/code&gt;라는걸 설치해야만 함 설치후 로컬환경에서 잘 작동
  &lt;a href=&quot;https://stackoverflow.com/questions/23937933/could-not-run-curl-config-errno-2-no-such-file-or-directory-when-installing&quot;&gt;pycurl 설치관련 stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;elasticbeanstalk에서-내-도메인-이름-사용하기&quot;&gt;elasticbeanstalk에서 내 도메인 이름 사용하기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;route53 등록전 name서버를 aws로 교체
  &lt;a href=&quot;http://wingsnote.com/57&quot;&gt;참고 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;route53에서 내 도메인과 elb 도메인 연결하기
  &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/customdomains.html&quot;&gt;route 53 설명서&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;request-수정하기&quot;&gt;request 수정하기&lt;/h3&gt;
&lt;p&gt;경향신문 크롤러에서 요청하면 산발적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;page not found&lt;/code&gt;를 response 하는 경우가 발생했다. 이럴경우 기존에 beautifulsoup으로 크롤링 하는 구조에서
  아래와 같은 에러를 뿜게된다.
  에러&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    File &quot;/home/zoozoo/projects/project-hp/my_homepage/main/utils.py&quot;, line 230, in khan_news_title
      title=soup.find('div', class_='topNews').a.text,
    AttributeError: 'NoneType' object has no attribute 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;try, except문으로 해결하려 했으나 조금 더 검색해 보니 request할 때 브라우저에서 확인하는 것과 같은 page를 받기 위해서는 header에 관련 내용을 함께
  요청해야 한다는 것을 알게 되었다.
  &lt;a href=&quot;https://stackoverflow.com/questions/27652543/how-to-use-python-requests-to-fake-a-browser-visit?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;stackoverflow 답변&lt;/a&gt;
  아래와 같이 request의 header에 관련내용을 추가해 줌으로써 브라우져에서 확인하는 것과 같은 response를 받게 되었다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.khan.co.kr/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;elasticbeanstalk-single-docker-플랫폼에서-cloudwatch-logs-사용하여-로그-남기기&quot;&gt;elasticbeanstalk single docker 플랫폼에서 cloudwatch logs 사용하여 로그 남기기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;elasticbeanstalk에서 ec2 인스턴스의 로그를 확인하기 위한 기본 방법은 설명서 나와있다.
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/using-features.logging.html&quot;&gt;Elastic Beanstalk 환경의 Amazon EC2 인스턴스의 로그 보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;cloudwatch log를 사용하기 위해서는 2가지 방법중 하나를 선택해야만 한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="record" /><summary type="html">나만의 뉴스 스탠드 NEWS-COLLECTER 프로젝트를 진행하며 기록해 놓은 자료입니다.</summary></entry><entry><title type="html">Nginx</title><link href="http://localhost:4000/2018-03-23/NGINX" rel="alternate" type="text/html" title="Nginx" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>http://localhost:4000/2018-03-23/NGINX</id><content type="html" xml:base="http://localhost:4000/2018-03-23/NGINX">&lt;h2 id=&quot;생활코딩-nginx강의&quot;&gt;생활코딩 Nginx강의&lt;/h2&gt;

&lt;p&gt;아래의 내용은 egoing님이 강의하시는 opentutorials의 NGINX강의에서 발췌한 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opentutorials.org/module/384/3462&quot;&gt;강의 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1강-nginx-소개&quot;&gt;1강 Nginx 소개&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹, 클라이언트와 서버간의 관계에 대한 설명&lt;/li&gt;
  &lt;li&gt;HTTP에 대한 소개&lt;/li&gt;
  &lt;li&gt;Web server -&amp;gt; HTTP라고도 할 수 있다.&lt;/li&gt;
  &lt;li&gt;웹서버의 역사
    &lt;ul&gt;
      &lt;li&gt;아파치의 압도적인 점유율&lt;/li&gt;
      &lt;li&gt;그러나 최근들어서 점점 아파치의 점유율을 따라오고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginx는 차세대 웹서버 - 더 적은 자원으로 더 빠르게 데이터를 서비스할 수 있는 경량화된 웹서버&lt;/li&gt;
  &lt;li&gt;Document Root : &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;설정파일: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conf.d&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;default.conf&lt;/code&gt;에는 nginx의 기본 설정이 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conf.d&lt;/code&gt;는 이름이 달라질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그파일: &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/nginx/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2강-nginx-컴파일&quot;&gt;2강 Nginx 컴파일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일하는 방법, 의존성 등의 문제가있는 난이도가 있음&lt;/li&gt;
  &lt;li&gt;Nginx 모듈을 컴파일을 통해서만 설치할 수 있기 때문에 알아두면 좋다&lt;/li&gt;
  &lt;li&gt;Nginx는 세가지 버전이 있다.
    &lt;ul&gt;
      &lt;li&gt;안전버전 : 실제 배포할 때&lt;/li&gt;
      &lt;li&gt;개발버전: 개발할 때 / 버그가 발생할 수 있다.&lt;/li&gt;
      &lt;li&gt;레거시버전: 예전버전의 Nginx&lt;/li&gt;
      &lt;li&gt;안전버전의 설치가 권장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginx는 마스터 프로세스(Master Process)와 작업자 프로세스(Worker Process)를 가지고 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux | grep nginx&lt;/code&gt;를 실행해보면 아래와 같은 프로세스가 떠있을 것이다.&lt;/li&gt;
      &lt;li&gt;마스터 프로세스는 루트 계정으로 실행되면서 80, 443 포트의 소켓과의 통신을 담당한다.&lt;/li&gt;
      &lt;li&gt;작업자 프로세스는 실제로 데이터를 처리하는 프로세스라고 할 수 있는데 이 프로세스를 핸들링할 사용자를 만들어야 한다. 일반적으로 웹서버의 워커 유저는 www-data를 사용한다. www-data를 만드는 법은 아래와 같다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useradd --shell /usr/sbin/nologin www-data&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3강-php-fpm-mysql-1&quot;&gt;3강 PHP-FPM-MYSQL 1&lt;/h2&gt;

&lt;h3 id=&quot;cgi&quot;&gt;CGI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CGI는 Common Gateway Interface의 약자로 웹서버와 외부 프로그램을 연결해주는 표준화된 프로토콜이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/384/1398.gif&quot; alt=&quot;cgi based server&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fastcgi&quot;&gt;FastCGI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CGI 는 하나의 요청(Request)에 하나의 프로세스를 생성한다. 이것은 프로세스를 생성하고 삭제하는 과정에서 많은 부하가 발생한다. 당연히 느리다. 이를 개선하기 위해서 등장한 것이 FastCGI이다. FastCGI는 요청이 있을 때마다 프로세스가 만들어지는 것이 아니라 만들어진 프로세스가 계속해서 새로운 요청들을 처리한다. 덕분에 프로세스를 생성하고 제거하는데 들어가는 부하가 줄어든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/384/1397.gif&quot; alt=&quot;cgi based server&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3강-php-fpm-mysql-2&quot;&gt;3강 PHP-FPM-MYSQL 2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FPM, 과 MYSQL을 설치를 한 후에는 Nginx를 설정해 줘야 하는데 설정파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf.d/default.conf&lt;/code&gt; 이거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/default&lt;/code&gt;에 있다.&lt;/li&gt;
  &lt;li&gt;socker - fastcgi_pass는 php-fpm과 NGINX를 연결하기 위한 인터페이스를 지정하는 것.&lt;/li&gt;
  &lt;li&gt;Upstream Module - Upstream Module는 NGINX를 일종의 부하분배장치(Load Balancer)로 이용할 수 있게 해주는 NGINX의 모듈이다. 자세한 내용은 Upstream Module를 참고한다. &lt;a href=&quot;http://opentutorials.org/module/384/4328&quot;&gt;Upstream Module 바로가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4강-php-fpm-mysql-3&quot;&gt;4강 PHP-FPM-MYSQL 3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PHP를 Nginx와 독립된 별도의 서버에 설치하여 연결하는 것을 설명&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5강-nginx-환경설정&quot;&gt;5강 NGINX 환경설정&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 설정파일은 conf 디렉토리 아래에 위치하고, 설치 바업에 따라서 설정파일의 위치가 다를 수 있다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;컴파일을 통해 설치할 경우 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/nginx/conf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;을 이용해서 우분투에 설치할 경우 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정파일 위치를 찾는 명령어
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find / -name nginx.conf&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정파일의 역할&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;nginx.conf : 메인 설정 파일.&lt;/li&gt;
      &lt;li&gt;fcgi.conf : FastCGI 환경설정 파일&lt;/li&gt;
      &lt;li&gt;sites-enabled : 활성화된 사이트들의 설정 파일들이 위치. 아파치에서는 Virtual host의 설정에 해당한다. 기본적으로 존재하지 않을수도 있다. 이 디렉토리를 직접 만들어서 사용하는 방법은 &lt;a href=&quot;http://opentutorials.org/module/384/4529&quot;&gt;가상 호스팅&lt;/a&gt;편에서 알아본다.&lt;/li&gt;
      &lt;li&gt;sites-available : 비활성화된 사이트들의 설정 파일들이 위치&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래의 Nginx 메인 환경설정 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;의 내용을 파해치며 Nginx의 환경설정을 이해해 나가보자&lt;/p&gt;

    &lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;worker_processes&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;mime.types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h3 id=&quot;core-모듈-설정&quot;&gt;Core 모듈 설정&lt;/h3&gt;

    &lt;p&gt;위의 예의 work_processes와 같은 지시자 설정 파일 최상단에 위치하면서 nginx의 기본적인 동작 방식을 정의한다. 여기서 사용되는 지시어들은 다른 곳에서 사용되지 않는다. &lt;a href=&quot;http://opentutorials.org/module/384/4533&quot;&gt;코어모듈 지시어 사전&lt;/a&gt;을 참고하자.&lt;/p&gt;

    &lt;h3 id=&quot;http-블록&quot;&gt;http 블록&lt;/h3&gt;

    &lt;p&gt;http 블록은 이후에 소개할 server, location의 루트 블록이라고 할 수 있고, 여기서 설정된 값을 하위 블록들은 상속한다. http 블록은 여러개를 사용할 수 있지만 관리상의 이슈로 한번만 사용하는 것을 권장한다.&lt;/p&gt;

    &lt;p&gt;http, server, location 블록은 계층구조를 가지고 있다. 많은 지시어가 각각의 블록에서 동시에 사용할 수 있는데, http의 내용은 server의 기본값이 되고, server의 지시어는 location의 기본값이 된다. 그리고 하위의 블록에서 선언된 지시어는 상위의 선언을 무시하고 적용된다.&lt;/p&gt;

    &lt;h3 id=&quot;server-블록&quot;&gt;server 블록&lt;/h3&gt;

    &lt;p&gt;server 블록은 하나의 웹사이트를 선언하는데 사용된다. 가상 호스팅(Virtual Host)의 개념이다. 예를들어 하나의 서버로 http://opentutorials.org 과 http://egoing.net 을 동시에 운영하고 싶은 경우 사용할 수 있는 방법이다. 가상 호스팅에 대한 자세한 내용은 &lt;a href=&quot;http://opentutorials.org/module/384/4529&quot;&gt;가상 호스팅 수업&lt;/a&gt;을 참고하자.&lt;/p&gt;

    &lt;h3 id=&quot;location-블록&quot;&gt;location 블록&lt;/h3&gt;

    &lt;p&gt;location 블록은 server 블록 안에 등장하면서 특정 URL을 처리하는 방법을 정의한다. 이를테면 http://opentutorials.org/course/1 과 http://opentutorials.org/module/1 로 접근하는 요청을 다르게 처리하고 싶을 때 사용한다.&lt;/p&gt;

    &lt;h3 id=&quot;events-블록&quot;&gt;events 블록&lt;/h3&gt;

    &lt;p&gt;이벤트 블록은 주로 네트워크의 동작방법과 관련된 설정값을 가진다. 이벤트 블록의 지시어들은 이벤트 블록에서만 사용할 수 있고, http, server, location와는 상속관계를 갖지 않는다. 이벤트 모듈 지시어에 대한 설명은 &lt;a href=&quot;http://opentutorials.org/module/384/4534&quot;&gt;이벤트 모듈 지시어 사전&lt;/a&gt;을 참고한다.&lt;/p&gt;

    &lt;h3 id=&quot;설정-파일의-반영&quot;&gt;설정 파일의 반영&lt;/h3&gt;

    &lt;p&gt;설정 파일의 내용을 변경한 후에는 이를 NGINX에 반영해야 하는데 아래와 같이 reload 명령을 이용한다. restart를 이용해도 되지만 권장되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;forward-proxy와-reverse-proxy의-차이&quot;&gt;Forward proxy와 Reverse proxy의 차이&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lesstif.com/pages/viewpage.action?pageId=21430345&quot;&gt;https://www.lesstif.com/pages/viewpage.action?pageId=21430345&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;vps란&quot;&gt;VPS란?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://library.gabia.com/contents/infrahosting/3594&quot;&gt;http://library.gabia.com/contents/infrahosting/3594&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="record" /><summary type="html">생활코딩 Nginx강의</summary></entry></feed>